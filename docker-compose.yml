# version: '3.8'

name: esim_bot

services:
  bot:
    build: .
    container_name: esim_bot
    env_file: .env.docker
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - NATS_URL=${NATS_URL}
    networks:
      - default
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"      # Максимальный размер файла лога
        max-file: "3"        # Количество файлов для ротации
        compress: "true"     # Сжимать старые логи
    volumes:
      - ./bot.py:/app/bot.py
      - ./database:/app/database
      - ./requirements.txt:/app/requirements.txt
      - ./alembic:/app/alembic
      - ./scripts:/app/scripts
      - ./monitoring:/app/monitoring
      - ./handlers:/app/handlers
    ports:
      - "9091:9091"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      nats:
        condition: service_started
    restart: always

  db:
    image: postgres:15
    env_file: .env.docker
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: esim_bot
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backups:/backups

  redis:
    image: redis:6.2
    command: redis-server --appendonly yes --replica-read-only no
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

  redis-replica-1:
    image: redis:6.2
    command: redis-server --appendonly yes --replica-read-only yes --replicaof redis 6379
    depends_on:
      - redis

  redis-replica-2:
    image: redis:6.2
    command: redis-server --appendonly yes --replica-read-only yes --replicaof redis 6379
    depends_on:
      - redis

  nats:
    image: nats:latest
    command: ["-js", "-sd", "/data"]
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - ./nats/data:/data

  alertmanager:
    image: prom/alertmanager:latest
    networks:
      - monitoring
    volumes:
      - ./prometheus:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    restart: always


  node-exporter:
    image: prom/node-exporter:latest
    networks:
      - monitoring
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: always

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    networks:
      - monitoring
      - default
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/esim_bot?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - db
    restart: always

  # Сервис для автоматических бэкапов PostgreSQL
  backup:
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backups:/backups
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=esim_bot
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - SCHEDULE=@daily          # Бэкап каждый день
      - BACKUP_KEEP_DAYS=7      # Хранить бэкапы 7 дней
      - BACKUP_KEEP_WEEKS=4     # Хранить недельные бэкапы 4 недели
      - BACKUP_KEEP_MONTHS=6    # Хранить месячные бэкапы 6 месяцев
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
    depends_on:
      - db
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

volumes:
  pgdata:
  redis_data:

networks:
  monitoring:
    driver: bridge