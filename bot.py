import os
import asyncio
import logging
import signal
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from dotenv import load_dotenv
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

from handlers.start import router as start_router
from handlers.catalog import router as catalog_router
from database.models import Base
from services.esim_service import esim_service

from contextlib import suppress


load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] #%(levelname)-8s %(filename)s:'
           '%(lineno)d - %(name)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
BOT_COMMANDS = [
    ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / Start the bot"),
    ("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main menu"),
    ("help", "–ü–æ–º–æ—â—å / Help"),
]


async def create_db_and_tables():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./esim_bot.db")
    engine = create_async_engine(DATABASE_URL, echo=False)
    
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    logger.info("Database and tables created successfully")
    return engine


def get_commands_for_language(language_code: str) -> list[BotCommand]:
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
    commands_dict = {
        "ru": [
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        ],
        "en": [
            BotCommand(command="start", description="Start the bot"),
            BotCommand(command="menu", description="Main menu"),
            BotCommand(command="help", description="Help"),
        ]
    }
    
    return commands_dict.get(language_code, commands_dict["en"])


async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞."""
    # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    supported_languages = ["ru", "en"]
    
    try:
        # –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ —è–∑—ã–∫–∞)
        await bot.delete_my_commands(scope=BotCommandScopeDefault())
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        for lang in supported_languages:
            try:
                await bot.delete_my_commands(
                    scope=BotCommandScopeDefault(),
                    language_code=lang
                )
            except Exception as e:
                logger.warning(f"Failed to delete commands for {lang}: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        for lang in supported_languages:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                commands = get_commands_for_language(lang)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
                await bot.set_my_commands(
                    commands,
                    scope=BotCommandScopeDefault(),
                    language_code=lang
                )
                logger.info(f"Set commands for language: {lang}")
            except Exception as e:
                logger.error(f"Failed to set commands for {lang}: {e}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞)
        default_commands = get_commands_for_language("en")
        await bot.set_my_commands(default_commands, scope=BotCommandScopeDefault())
        
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    bot = None
    session_pool = None
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    async def shutdown(signal_type=None):
        nonlocal bot, session_pool
        
        logger.info(f'Received signal {signal_type}, shutting down...')
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–µ—Å—Å–∏–π
        if session_pool:
            await session_pool.close()
            logger.info('Database session pool closed')
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if bot:
            with suppress(Exception):
                await bot.session.close()
                logger.info('Bot session closed')
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        [task.cancel() for task in tasks]
        logger.info(f'Cancelling {len(tasks)} outstanding tasks')
        await asyncio.gather(*tasks, return_exceptions=True)
        asyncio.get_event_loop().stop()
        logger.info('Shutdown complete')
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
        engine = await create_db_and_tables()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        session_pool = sessionmaker(
            engine, expire_on_commit=False, class_=AsyncSession
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot = Bot(token=os.getenv("BOT_TOKEN", ""),
                  default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM (Redis –∏–ª–∏ Memory)
        if os.getenv("USE_REDIS", "False").lower() == "true":
            storage = RedisStorage.from_url(
                os.getenv("REDIS_URL", "redis://localhost:6379/0")
            )
            logger.info("Using Redis storage for FSM")
        else:
            storage = MemoryStorage()
            logger.info("Using Memory storage for FSM")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher(storage=storage)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Å—Å–∏–∏ –ë–î –≤ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        @dp.update.middleware()
        async def db_session_middleware(handler, event, data):
            async with session_pool() as session:
                data["session"] = session
                return await handler(event, data)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(start_router)
        dp.include_router(catalog_router)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã, –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
        # dp.include_router(account_router)
        # dp.include_router(support_router)
        # dp.include_router(admin_router)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await set_bot_commands(bot)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API
        async with session_pool() as session:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω –∏ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API...")
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω—ã
            from database.queries import get_all_countries
            
            # –ü—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            max_attempts = 3
            attempt = 1
            success = False
            
            while attempt <= max_attempts and not success:
                try:
                    logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω: –ø–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {max_attempts}")
                    success = await esim_service.sync_countries_and_packages(session, sync_packages=False)
                    
                    if success:
                        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                        break
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω –Ω–µ —É–¥–∞–ª–∞—Å—å")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                
                attempt += 1
                if attempt <= max_attempts and not success:
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt}...")
                    await asyncio.sleep(3)
            
            # –¢–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            countries = await get_all_countries(session)
            logger.info(f"üåé –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {len(countries)} —Å—Ç—Ä–∞–Ω")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
            total_packages = 0
            countries_with_packages = 0
            countries_processed = 0
            
            for country in countries:
                countries_processed += 1
                logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country.code} ({countries_processed}/{len(countries)})")
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω—ã
                packages_success = await esim_service.sync_packages_for_country(session, country)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
                from database.queries import get_packages_by_country
                packages = await get_packages_by_country(session, country.id)
                total_packages += len(packages)
                
                if len(packages) > 0:
                    countries_with_packages += 1
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(packages)} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country.code}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country.code}")
            
            logger.info(f"üíæ –í—Å–µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {total_packages} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è {countries_with_packages} —Å—Ç—Ä–∞–Ω")
                        break
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                
                attempt += 1
                if attempt <= max_attempts and not success:
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt}...")
                    await asyncio.sleep(3)
            
            if not success:
                logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Critical error: {e}", exc_info=True)
        await shutdown()
        raise
    finally:
        await shutdown()


if __name__ == "__main__":
    asyncio.run(main())