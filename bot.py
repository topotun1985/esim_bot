import os
import asyncio
import logging
import signal
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from dotenv import load_dotenv
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from aiohttp import web
import datetime
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
import json

from handlers.start import router as start_router
from handlers.catalog import router as catalog_router
from handlers.payment import router as payment_router
from handlers.account import router as account_router
from handlers.admin import router as admin_router
from handlers.webhook import setup_webhook_server
from database.models import Base, ESim, Order, User
from database.queries import get_all_countries
from services.esim_service import esim_service

from contextlib import suppress


load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] #%(levelname)-8s %(filename)s:'
           '%(lineno)d - %(name)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
BOT_COMMANDS = [
    ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / Start the bot"),
    ("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main menu"),
    ("help", "–ü–æ–º–æ—â—å / Help"),
]


async def create_db_and_tables():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./esim_bot.db")
    engine = create_async_engine(DATABASE_URL, echo=False)

    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    logger.info("Database and tables created successfully")
    return engine


def get_commands_for_language(language_code: str) -> list[BotCommand]:
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
    commands_dict = {
        "ru": [
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        ],
        "en": [
            BotCommand(command="start", description="Start the bot"),
            BotCommand(command="menu", description="Main menu"),
            BotCommand(command="help", description="Help"),
        ]
    }

    return commands_dict.get(language_code, commands_dict["en"])


async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞."""
    # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    supported_languages = ["ru", "en"]

    try:
        # –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ —è–∑—ã–∫–∞)
        await bot.delete_my_commands(scope=BotCommandScopeDefault())

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        for lang in supported_languages:
            try:
                await bot.delete_my_commands(
                    scope=BotCommandScopeDefault(),
                    language_code=lang
                )
            except Exception as e:
                logger.warning(f"Failed to delete commands for {lang}: {e}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        for lang in supported_languages:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                commands = get_commands_for_language(lang)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
                await bot.set_my_commands(
                    commands,
                    scope=BotCommandScopeDefault(),
                    language_code=lang
                )
                logger.info(f"Set commands for language: {lang}")
            except Exception as e:
                logger.error(f"Failed to set commands for {lang}: {e}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞)
        default_commands = get_commands_for_language("en")
        await bot.set_my_commands(default_commands, scope=BotCommandScopeDefault())

    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤ —Å API
async def periodic_package_sync(session_factory, sync_interval_hours=1):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç—ã eSIM —Å API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

    Args:
        session_factory: –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sync_interval_hours: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö
    """
    logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {sync_interval_hours} —á–∞—Å–æ–≤")

    while True:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            next_sync = datetime.datetime.now() + datetime.timedelta(hours=sync_interval_hours)
            logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: {next_sync.strftime('%Y-%m-%d %H:%M:%S')}")

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã)
            await asyncio.sleep(sync_interval_hours * 3600)

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–ª–∞–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤...")

            async with session_factory() as session:
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
                result = await esim_service.sync_packages_with_api(session)

                if result["success"]:
                    logger.info(f"‚úÖ –ü–ª–∞–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
                                f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω: {result.get('success_count', 0)}, "
                                f"–û—à–∏–±–æ–∫: {result.get('failed_count', 0)}, "
                                f"–í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {result.get('total_packages', 0)}")
                else:
                    error_message = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤: {error_message}")

        except Exception as e:
            logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç


# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
async def check_esim_balance_task(bot: Bot, session_pool):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ eSIM –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ eSIM")

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤)
    check_interval = int(os.getenv("BALANCE_CHECK_INTERVAL", 43200))

    # –ü–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç—Ä–∞—Ñ–∏–∫–∞)
    low_balance_threshold = float(os.getenv("LOW_BALANCE_THRESHOLD", 20.0))

    while True:
        try:
            async with session_pool() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ eSIM
                query = select(ESim).options(
                    joinedload(ESim.order).joinedload(Order.user),
                    joinedload(ESim.order).joinedload(Order.package)
                ).where(
                    ESim.esim_status == "ACTIVATED"
                )

                result = await session.execute(query)
                active_esims = result.scalars().all()

                for esim in active_esims:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å eSIM —á–µ—Ä–µ–∑ API
                        esim_status = await esim_service.check_esim_status(
                            esim.esim_tran_no, esim.iccid
                        )

                        if not esim_status.get("success"):
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ
                        total_volume = esim_status.get("total_volume", 0)
                        used_volume = esim_status.get("order_usage", 0)

                        if total_volume > 0:
                            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç—Ä–∞—Ñ–∏–∫–∞
                            remaining_percent = 100 - (used_volume / total_volume * 100)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            # (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –≤ raw_data)
                            raw_data = esim.raw_data or {}

                            # –ï—Å–ª–∏ raw_data - —Å—Ç—Ä–æ–∫–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
                            if isinstance(raw_data, str):
                                try:
                                    raw_data = json.loads(raw_data)
                                except json.JSONDecodeError:
                                    raw_data = {}

                            notification_sent = raw_data.get("low_balance_notification_sent", False)

                            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∏–∑–∫–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                            if remaining_percent <= low_balance_threshold and not notification_sent:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                await send_low_balance_notification(
                                    bot,
                                    esim,
                                    remaining_percent,
                                    session
                                )

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ raw_data
                                raw_data["low_balance_notification_sent"] = True
                                esim.raw_data = json.dumps(raw_data)
                                await session.commit()

                            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                            elif remaining_percent > low_balance_threshold and notification_sent:
                                raw_data["low_balance_notification_sent"] = False
                                esim.raw_data = json.dumps(raw_data)
                                await session.commit()

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ eSIM {esim.iccid}: {str(e)}")
                        continue

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª
            admin_chat_id = os.getenv("ADMIN_CHAT_ID")
            if admin_chat_id:
                await bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ eSIM:\n{str(e)}"
                )

        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(check_interval)


async def send_low_balance_notification(bot: Bot, esim: ESim, remaining_percent: float, session: AsyncSession):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        esim: –û–±—ä–µ–∫—Ç eSIM
        remaining_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç—Ä–∞—Ñ–∏–∫–∞
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø–∞–∫–µ—Ç–µ
        order = esim.order
        user = order.user
        package = order.package

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.language_code == 'ru':
            message_text = (
                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\n"
                f"–£ –≤–∞—à–µ–π eSIM –¥–ª—è <b>{package.country.name}</b> –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ "
                f"<b>{remaining_percent:.1f}%</b> —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n"
                f"ICCID: <code>{esim.iccid}</code>\n"
                f"–ü–∞–∫–µ—Ç: {package.name}\n\n"
                f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å eSIM –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç—Ä–∞—Ñ–∏–∫–∞, "
                f"–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ eSIM'."
            )
        else:
            message_text = (
                f"‚ö†Ô∏è <b>Warning! Low data balance</b>\n\n"
                f"Your eSIM for <b>{package.country.name}</b> has only "
                f"<b>{remaining_percent:.1f}%</b> of data remaining.\n\n"
                f"ICCID: <code>{esim.iccid}</code>\n"
                f"Package: {package.name}\n\n"
                f"To extend your eSIM or top up your data balance, "
                f"use the /menu command and go to 'My eSIMs' section."
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=user.telegram_id,
            text=message_text,
            parse_mode=ParseMode.HTML
        )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è eSIM {esim.iccid}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    bot = None
    session_pool = None

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    async def shutdown(signal_type=None):
        nonlocal bot

        logger.info(f'Received signal {signal_type}, shutting down...')

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–µ—Å—Å–∏–π - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ session_pool —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è sessionmaker
        logger.info('Database connections will be closed automatically')

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if bot:
            with suppress(Exception):
                await bot.session.close()
                logger.info('Bot session closed')

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        logger.info(f'Cancelling {len(tasks)} outstanding tasks')

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for task in tasks:
            task.cancel()

        if tasks:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            await asyncio.gather(*tasks, return_exceptions=True)

        # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop –∑–¥–µ—Å—å, —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        logger.info('Shutdown complete')

    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã
        engine = await create_db_and_tables()

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        session_pool = sessionmaker(
            engine, expire_on_commit=False, class_=AsyncSession
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot = Bot(token=os.getenv("BOT_TOKEN", ""),
                  default=DefaultBotProperties(parse_mode=ParseMode.HTML))

        # –í—ã–±–∏—Ä–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM (Redis –∏–ª–∏ Memory)
        if os.getenv("USE_REDIS", "False").lower() == "true":
            storage = RedisStorage.from_url(
                os.getenv("REDIS_URL", "redis://localhost:6379/0")
            )
            logger.info("Using Redis storage for FSM")
        else:
            storage = MemoryStorage()
            logger.info("Using Memory storage for FSM")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher(storage=storage)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Å—Å–∏–∏ –ë–î –≤ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        @dp.update.middleware()
        async def db_session_middleware(handler, event, data):
            async with session_pool() as session:
                data["session"] = session
                return await handler(event, data)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(start_router)
        dp.include_router(catalog_router)
        dp.include_router(payment_router)
        dp.include_router(account_router)
        dp.include_router(admin_router)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã, –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
        # dp.include_router(support_router)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await set_bot_commands(bot)

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        auto_sync = os.getenv("AUTO_SYNC_ON_STARTUP", "False").lower() == "true"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        max_attempts = 3

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(check_esim_balance_task(bot, session_pool))

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        sync_packages_enabled = os.getenv("ENABLE_PERIODIC_PACKAGE_SYNC", "True").lower() == "true"
        sync_interval_hours = float(os.getenv("PACKAGE_SYNC_INTERVAL_HOURS", "1.0"))

        if sync_packages_enabled:
            logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª: {sync_interval_hours} —á–∞—Å–æ–≤")
            asyncio.create_task(periodic_package_sync(session_pool, sync_interval_hours))
        else:
            logger.info("‚ùå –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        webhook_enabled = os.getenv("ENABLE_WEBHOOKS", "False").lower() == "true"
        if webhook_enabled:
            webhook_port = int(os.getenv("WEBHOOK_PORT", "9091"))
            logger.info(f"Setting up webhook server on port {webhook_port}")
            app = web.Application()
            webhook_runner = await setup_webhook_server(app, bot, session_pool, webhook_port)
            logger.info("Webhook server is running")
        else:
            logger.info("Webhooks are disabled. Set ENABLE_WEBHOOKS=true to enable them.")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"Critical error: {e}", exc_info=True)
        await shutdown()
        raise
    finally:
        await shutdown()


if __name__ == "__main__":
    asyncio.run(main())