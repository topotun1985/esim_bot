#!/usr/bin/env python
# -*- coding: utf-8 -*-

import asyncio
import sys
import os
from datetime import datetime
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models import Order, OrderStatus, ESim, Package, User
from services.esim_service import ESIMService
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, joinedload
from sqlalchemy.future import select
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
from aiogram import Bot
from aiogram.enums import ParseMode

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
# –í Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL —Å —Ö–æ—Å—Ç–æ–º db
# –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–Ω–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å db –Ω–∞ localhost
is_docker = os.path.exists('/.dockerenv')
if "db:" in DATABASE_URL and not is_docker:
    DATABASE_URL = DATABASE_URL.replace("db:", "localhost:")
    logger.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL")

logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else DATABASE_URL}")
engine = create_async_engine(DATABASE_URL)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def retry_failed_orders():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º FAILED, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–ø–ª–∞—á–µ–Ω—ã,
    –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –Ω–∏—Ö eSIM —á–µ—Ä–µ–∑ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    """
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    async with AsyncSession(engine) as session:
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ eSIM
            esim_service = ESIMService()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö eSIM —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            await check_async_esim_orders(session, esim_service)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API
            try:
                all_available_packages = await esim_service.get_all_available_packages()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_available_packages)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API")
                
                # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                for i, (code, data) in enumerate(list(all_available_packages.items())[:5]):
                    logger.info(f"–ü–∞–∫–µ—Ç {i+1}: {code}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API: {str(e)}")
                all_available_packages = {}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("–ü–æ–∏—Å–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ MissingGreenlet
            query = select(Order).options(
                joinedload(Order.package).joinedload(Package.country),
                joinedload(Order.user)
            ).where(
                Order.status == OrderStatus.FAILED.value,
                Order.paid_at.is_not(None)  # –ó–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
            )
            
            result = await session.execute(query)
            failed_orders = result.unique().scalars().all()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            orders_data = []
            for order in failed_orders:
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                order_data = {
                    "id": order.id,
                    "status": order.status,
                    "package_code": order.package.package_code if order.package else None,
                    "country_code": order.package.country.code if order.package and order.package.country else "",
                    "user_id": order.user.id if order.user else None,
                    "email": order.user.email if order.user and hasattr(order.user, 'email') else None,
                    "phone": order.user.phone if order.user and hasattr(order.user, 'phone') else None,
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if not order_data["package_code"]:
                    logger.error(f"‚ùå –£ –∑–∞–∫–∞–∑–∞ #{order_data['id']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–∫–µ—Ç")
                    continue
                
                if not order_data["user_id"]:
                    logger.error(f"‚ùå –£ –∑–∞–∫–∞–∑–∞ #{order_data['id']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    continue
                
                orders_data.append(order_data)
            
            if not orders_data:
                logger.info("‚úÖ –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(orders_data)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
            for order_data in orders_data:
                order_id = order_data["id"]
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id} (—Å—Ç–∞—Ç—É—Å: {order_data['status']})")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –ø–∞–∫–µ—Ç–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
                package_code = order_data["package_code"]
                country_code = order_data["country_code"]
                
                logger.info(f"–ó–∞–∫–∞–∑ #{order_id}: –ø–∞–∫–µ—Ç {package_code}, —Å—Ç—Ä–∞–Ω–∞ {country_code}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –ø–∞–∫–µ—Ç–∞ (—Å—É—Ñ—Ñ–∏–∫—Å)
                modified_package_code = package_code.split("-")[-1] if "-" in package_code else package_code
                
                logger.info(f"–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø–∞–∫–µ—Ç–∞: {package_code} -> {modified_package_code}")
                
                # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                email = order_data["email"] or "topotun85@example.com"  # –ó–∞–ø–∞—Å–Ω–æ–π email, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é email: {email}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                phone = order_data["phone"] or ""
                
                # –°–æ–∑–¥–∞–µ–º eSIM —á–µ—Ä–µ–∑ API
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ eSIM –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
                esim_result = await esim_service.create_esim(
                    order_id=str(order_id),
                    package_code=modified_package_code,
                    email=email,
                    phone_number=phone,
                    country_code=country_code
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è eSIM
                if not esim_result.get("success"):
                    error_msg = esim_result.get("error", "Unknown error")
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å eSIM –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {error_msg}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ eSIM
                iccid = esim_result.get("iccid", "")
                qr_code = esim_result.get("qr_code", "")
                activation_code = esim_result.get("activation_code", "")
                esim_tran_no = esim_result.get("esim_tran_no", "")
                
                # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å order_no, –Ω–æ –Ω–µ—Ç iccid, —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                # –ù–æ –º—ã –Ω–µ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å, –∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
                order_no = esim_result.get("order_no", "")
                if order_no and not iccid:
                    logger.info(f"‚ÑπÔ∏è –ó–∞–∫–∞–∑ eSIM #{order_id} —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_no}")
                    logger.info(f"–ó–∞–∫–∞–∑ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ FAILED –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    order_query = select(Order).where(Order.id == order_id)
                    order_result = await session.execute(order_query)
                    order = order_result.scalar_one_or_none()
                    
                    if order:
                        order.order_no = order_no
                        await session.commit()
                        logger.info(f"‚úÖ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {order_no} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
                    
                    continue
                
                if not iccid:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ICCID –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
                    continue
                
                logger.info(f"‚úÖ eSIM —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: ICCID {iccid}")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                order_query = select(Order).where(Order.id == order_id)
                order_result = await session.execute(order_query)
                order = order_result.scalar_one_or_none()
                
                if not order:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ #{order_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± eSIM –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                esim = ESim(
                    order_id=order_id,
                    iccid=iccid,
                    qr_code_url=qr_code,
                    activation_code=activation_code,
                    esim_tran_no=esim_tran_no,
                    esim_status="ACTIVE",
                    raw_data=json.dumps(esim_result.get("raw_response", {}))
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                order.status = OrderStatus.COMPLETED.value
                order.updated_at = datetime.now()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                session.add(esim)
                session.add(order)
                await session.commit()
                
                logger.info(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await send_esim_notification(order_id, iccid, qr_code, activation_code, esim_result)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
            await bot.session.close()

async def check_async_esim_orders(session, esim_service):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö eSIM —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
    –ò—â–µ—Ç –∑–∞–∫–∞–∑—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å order_no, –Ω–æ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ eSIM.
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º eSIM")
    
    # –ò—â–µ–º –∑–∞–∫–∞–∑—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å order_no, –Ω–æ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ eSIM
    query = select(Order).outerjoin(ESim, Order.id == ESim.order_id).where(
        Order.order_no.is_not(None),
        ESim.id.is_(None),
        Order.paid_at.is_not(None)  # –ó–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω
    )
    
    # –í—ã–≤–æ–¥–∏–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"SQL –∑–∞–ø—Ä–æ—Å: {query}")
    
    result = await session.execute(query)
    orders = result.unique().scalars().all()
    
    if not orders:
        logger.info("‚úÖ –ó–∞–∫–∞–∑–æ–≤ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã —Å order_no
        check_query = select(Order).where(
            Order.order_no.is_not(None),
            Order.paid_at.is_not(None)
        )
        check_result = await session.execute(check_query)
        check_orders = check_result.unique().scalars().all()
        
        if check_orders:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(check_orders)} –∑–∞–∫–∞–∑–æ–≤ —Å order_no:")
            for order in check_orders:
                logger.info(f"–ó–∞–∫–∞–∑ #{order.id}, —Å—Ç–∞—Ç—É—Å: {order.status}, order_no: {order.order_no}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∑–∞–∫–∞–∑–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å eSIM
                esim_query = select(ESim).where(ESim.order_id == order.id)
                esim_result = await session.execute(esim_query)
                esim = esim_result.scalar_one_or_none()
                
                if esim:
                    logger.info(f"–£ –∑–∞–∫–∞–∑–∞ #{order.id} –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å eSIM: {esim.iccid}")
                else:
                    logger.info(f"–£ –∑–∞–∫–∞–∑–∞ #{order.id} –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ eSIM")
        else:
            logger.info("–ó–∞–∫–∞–∑–æ–≤ —Å order_no –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return
    
    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º eSIM")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    for order in orders:
        order_id = order.id
        order_no = order.order_no
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ eSIM #{order_id} (order_no: {order_no})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ eSIM
        status_result = await esim_service.check_esim_order_status(order_no)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        if not status_result.get("success"):
            error_msg = status_result.get("error", "Unknown error")
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ eSIM –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {error_msg}")
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ eSIM
        iccid = status_result.get("iccid", "")
        qr_code = status_result.get("qr_code", "")
        activation_code = status_result.get("activation_code", "")
        esim_tran_no = status_result.get("esim_tran_no", "")
        
        if not iccid:
            logger.info(f"‚ÑπÔ∏è eSIM –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –µ—â–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
            continue
        
        logger.info(f"‚úÖ eSIM —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: ICCID {iccid}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± eSIM –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        esim = ESim(
            order_id=order_id,
            iccid=iccid,
            qr_code_url=qr_code,
            activation_code=activation_code,
            esim_tran_no=esim_tran_no,
            esim_status="ACTIVE",
            raw_data=json.dumps(status_result.get("raw_response", {}))
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = OrderStatus.COMPLETED.value
        order.updated_at = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session.add(esim)
        session.add(order)
        await session.commit()
        
        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_esim_notification(order_id, iccid, qr_code, activation_code, status_result)

async def send_esim_notification(order_id, iccid, qr_code, activation_code, esim_result):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π eSIM —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
    
    Args:
        order_id: ID –∑–∞–∫–∞–∑–∞
        iccid: ICCID eSIM
        qr_code: URL QR-–∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        activation_code: –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        esim_result: –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è eSIM
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π eSIM –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–∞–∫–µ—Ç–æ–º
            query = select(Order).options(
                joinedload(Order.user),
                joinedload(Order.package).joinedload(Package.country)
            ).where(Order.id == order_id)
            
            result = await session.execute(query)
            order = result.unique().scalar_one_or_none()
            
            if not order or not order.user:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ #{order_id} –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ eSIM
            message_text = (
                "üéâ *–í–∞—à–∞ eSIM –≥–æ—Ç–æ–≤–∞!*\n\n"
                f"*ICCID:* `{iccid}`\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
            if order.package and order.package.country:
                message_text += (
                    f"*–°—Ç—Ä–∞–Ω–∞:* {order.package.country.name}\n"
                    f"*–ü–∞–∫–µ—Ç:* {order.package.data_amount} –ì–ë –Ω–∞ {order.package.duration} –¥–Ω–µ–π\n\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º QR-–∫–æ–¥, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if qr_code:
                message_text += "QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if activation_code:
                message_text += f"*–ö–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:* `{activation_code}`\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º APN, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            apn = esim_result.get("apn", "")
            if apn:
                message_text += f"*APN:* `{apn}`\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            message_text += (
                "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å' –∏–ª–∏ 'SIM-–∫–∞—Ä—Ç—ã'\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å eSIM' –∏–ª–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω'\n"
                "4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é\n"
                "5. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                chat_id=order.user.telegram_id,
                text=message_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å QR-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if qr_code:
                try:
                    await bot.send_photo(
                        chat_id=order.user.telegram_id,
                        photo=qr_code,
                        caption="QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–π eSIM. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞: {str(e)}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ QR-–∫–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    await bot.send_message(
                        chat_id=order.user.telegram_id,
                        text=f"–°—Å—ã–ª–∫–∞ –Ω–∞ QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {qr_code}"
                    )
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π eSIM —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {order.user.telegram_id}")
    
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(retry_failed_orders())