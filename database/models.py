from datetime import datetime
from sqlalchemy import Column, Integer, String, Float, Boolean, ForeignKey, DateTime, Text, BigInteger, JSON, Enum
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
import enum

Base = declarative_base()

class User(Base):
    """User model to store Telegram user information"""
    __tablename__ = 'users'
    
    id = Column(Integer, primary_key=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False)
    username = Column(String(255), nullable=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    language_code = Column(String(10), default='ru')
    is_admin = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    orders = relationship("Order", back_populates="user")
    support_tickets = relationship("SupportTicket", back_populates="user")
    
    def __repr__(self):
        return f"<User(id={self.id}, telegram_id={self.telegram_id}, username={self.username})>"


class Country(Base):
    """Country model to store available countries for eSIM"""
    __tablename__ = 'countries'
    
    id = Column(Integer, primary_key=True)
    code = Column(String(10), unique=True, nullable=False)  # Country code (e.g., US, GB)
    name = Column(String(255), nullable=False)  # Country name
    name_ru = Column(String(255), nullable=True)  # Country name in Russian
    flag_emoji = Column(String(10), nullable=True)  # Flag emoji (e.g., üá∫üá∏)
    is_available = Column(Boolean, default=True)
    
    # Relationships
    packages = relationship("Package", back_populates="country")
    
    def __repr__(self):
        return f"<Country(id={self.id}, code={self.code}, name={self.name})>"


class Package(Base):
    """Package model to store eSIM packages with their details"""
    __tablename__ = 'packages'
    
    id = Column(Integer, primary_key=True)
    country_id = Column(Integer, ForeignKey('countries.id'), nullable=False)
    package_code = Column(String(255), unique=True, nullable=False)  # Code from provider
    slug = Column(String(255), unique=True, nullable=True)  # Slug from provider
    name = Column(String(255), nullable=False)  # Package name
    data_amount = Column(Float, nullable=False)  # Amount of data in GB
    duration = Column(Integer, nullable=False)  # Duration in days
    price = Column(Float, nullable=False)  # Price in USD (wholesale price from provider)
    retail_price = Column(Float, nullable=True)  # Our retail price in USD
    description = Column(Text, nullable=True)  # Package description
    is_available = Column(Boolean, default=True)
    last_synced_at = Column(DateTime, nullable=True)  # Timestamp of last sync
    
    # Relationships
    country = relationship("Country", back_populates="packages")
    orders = relationship("Order", back_populates="package")
    
    def __repr__(self):
        return f"<Package(id={self.id}, name={self.name}, data_amount={self.data_amount}GB, duration={self.duration} days, price=${self.price})>"


class OrderStatus(enum.Enum):
    """Enum for order statuses"""
    CREATED = "created"  # –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
    AWAITING_PAYMENT = "awaiting_payment"  # –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞
    PAID = "paid"  # –û–ø–ª–∞—á–µ–Ω–æ, –Ω–æ eSIM –µ—â–µ –Ω–µ –∑–∞–∫–∞–∑–∞–Ω–∞
    PROCESSING = "processing"  # –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    COMPLETED = "completed"  # –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, eSIM –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    FAILED = "failed"  # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞
    CANCELED = "canceled"  # –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω


class OrderType(enum.Enum):
    """Enum for order types"""
    NEW = "new"  # –ó–∞–∫–∞–∑ –Ω–∞ –Ω–æ–≤—É—é eSIM
    TOPUP = "topup"  # –ó–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π eSIM


class PaymentMethod(enum.Enum):
    """Enum for payment methods"""
    CARD = "card"  # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ Telegram Pay
    CRYPTO_TON = "crypto_ton"  # –û–ø–ª–∞—Ç–∞ –≤ TON —á–µ—Ä–µ–∑ CryptoBot
    CRYPTO_BTC = "crypto_btc"  # –û–ø–ª–∞—Ç–∞ –≤ Bitcoin —á–µ—Ä–µ–∑ Cryptomus
    CRYPTO_ETH = "crypto_eth"  # –û–ø–ª–∞—Ç–∞ –≤ Ethereum —á–µ—Ä–µ–∑ Cryptomus
    CRYPTO_USDT = "crypto_usdt"  # –û–ø–ª–∞—Ç–∞ –≤ USDT —á–µ—Ä–µ–∑ Cryptomus


class Order(Base):
    """Order model to store eSIM orders"""
    __tablename__ = 'orders'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    package_id = Column(Integer, ForeignKey('packages.id'), nullable=False)
    transaction_id = Column(String(255), unique=True, nullable=False)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è API-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    order_no = Column(String(255), unique=True, nullable=True)  # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    status = Column(String(50), default=OrderStatus.CREATED.value)
    order_type = Column(String(50), default=OrderType.NEW.value)
    payment_method = Column(String(50), nullable=True)  # –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
    payment_id = Column(String(255), nullable=True)  # ID –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    invoice_id = Column(String(255), nullable=True)  # ID –∏–Ω–≤–æ–π—Å–∞ –æ—Ç CryptoBot/Cryptomus
    payment_details = Column(Text, nullable=True)  # –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    paid_at = Column(DateTime, nullable=True)  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã
    amount = Column(Float, nullable=False)  # –°—É–º–º–∞ –≤ USD
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    user = relationship("User", back_populates="orders")
    package = relationship("Package", back_populates="orders")
    esim = relationship("ESim", uselist=False, back_populates="order")
    
    def __repr__(self):
        return f"<Order(id={self.id}, transaction_id={self.transaction_id}, status={self.status})>"


class ESim(Base):
    """ESim model to store eSIM details after successful order"""
    __tablename__ = 'esims'
    
    id = Column(Integer, primary_key=True)
    order_id = Column(Integer, ForeignKey('orders.id'), nullable=False, unique=True)
    esim_tran_no = Column(String(255), nullable=True)  # –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    iccid = Column(String(255), nullable=True)  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä SIM-–∫–∞—Ä—Ç—ã
    imsi = Column(String(255), nullable=True)  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞
    msisdn = Column(String(255), nullable=True)  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    activation_code = Column(String(1024), nullable=True)  # –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ eSIM
    qr_code_url = Column(String(1024), nullable=True)  # URL QR-–∫–æ–¥–∞
    short_url = Column(String(512), nullable=True)  # –ö–æ—Ä–æ—Ç–∫–∏–π URL –¥–ª—è QR-–∫–æ–¥–∞
    smdp_status = Column(String(50), nullable=True)  # –°—Ç–∞—Ç—É—Å SM-DP+
    esim_status = Column(String(50), nullable=True)  # –°—Ç–∞—Ç—É—Å eSIM
    active_type = Column(Integer, nullable=True)  # –¢–∏–ø –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    expired_time = Column(DateTime, nullable=True)  # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    total_volume = Column(BigInteger, nullable=True)  # –û–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö
    total_duration = Column(Integer, nullable=True)  # –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
    duration_unit = Column(String(20), nullable=True)  # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    order_usage = Column(BigInteger, nullable=True)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö
    pin = Column(String(50), nullable=True)  # PIN-–∫–æ–¥, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
    puk = Column(String(50), nullable=True)  # PUK-–∫–æ–¥, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
    apn = Column(String(255), nullable=True)  # –ò–º—è —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    raw_data = Column(JSON, nullable=True)  # –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    order = relationship("Order", back_populates="esim")
    
    def __repr__(self):
        return f"<ESim(id={self.id}, iccid={self.iccid}, esim_status={self.esim_status})>"


class FAQ(Base):
    """FAQ model to store frequently asked questions"""
    __tablename__ = 'faqs'
    
    id = Column(Integer, primary_key=True)
    question_en = Column(Text, nullable=False)  # –í–æ–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    answer_en = Column(Text, nullable=False)  # –û—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    question_ru = Column(Text, nullable=True)  # –í–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    answer_ru = Column(Text, nullable=True)  # –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    order = Column(Integer, default=0)  # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    is_active = Column(Boolean, default=True)  # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å FAQ
    
    def __repr__(self):
        return f"<FAQ(id={self.id}, question_en={self.question_en[:30]}...)>"


class SupportTicket(Base):
    """Support ticket model for user support requests"""
    __tablename__ = 'support_tickets'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    subject = Column(String(255), nullable=False)  # –¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞
    message = Column(Text, nullable=False)  # –°–æ–æ–±—â–µ–Ω–∏–µ
    status = Column(String(50), default='open')  # open, closed
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    user = relationship("User", back_populates="support_tickets")
    messages = relationship("SupportMessage", back_populates="ticket")
    
    def __repr__(self):
        return f"<SupportTicket(id={self.id}, user_id={self.user_id}, status={self.status})>"


class SupportMessage(Base):
    """Model for messages in support chat"""
    __tablename__ = 'support_messages'
    
    id = Column(Integer, primary_key=True)
    ticket_id = Column(Integer, ForeignKey('support_tickets.id'), nullable=False)
    sender_type = Column(String(20), nullable=False)  # user, admin
    text = Column(Text, nullable=False)  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    ticket = relationship("SupportTicket", back_populates="messages")
    
    def __repr__(self):
        return f"<SupportMessage(id={self.id}, ticket_id={self.ticket_id}, sender_type={self.sender_type})>"