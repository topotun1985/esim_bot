from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, desc, and_, or_
from sqlalchemy.orm import joinedload
from datetime import datetime, timedelta
import logging
import json
from typing import List

from database.models import User, Order, ESim, OrderStatus, Package, OrderType
from database.queries import get_user_by_telegram_id
from handlers.start import get_main_menu_keyboard
from utils.states import MainMenu, AccountMenu, TopUpESim
from services.esim_service import esim_service
from utils.helpers import format_bytes, format_datetime, format_esim_status, format_expiration_date

logger = logging.getLogger(__name__)

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö eSIM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_active_esims_for_user(session: AsyncSession, user_id: int) -> list[ESim]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö eSIM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(
        select(ESim)
        .join(Order, ESim.order_id == Order.id)
        .where(
            and_(
                Order.user_id == user_id,
                Order.status == OrderStatus.COMPLETED.value
            )
        )
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country)
        )
        .order_by(desc(ESim.created_at))
    )
    return result.scalars().all()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –≤ —Ç–µ–∫—Å—Ç–µ.
    """
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    
    return text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@router.callback_query(F.data == "account")
async def account_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    if not user:
        logger.error(f"User not found: {callback.from_user.id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" if language_code == 'ru' else "Error: user not found")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ eSIM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_esims = await get_active_esims_for_user(session, user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(Order)
        .where(Order.user_id == user.id)
        .order_by(desc(Order.created_at))
    )
    orders = result.scalars().all()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_date = format_datetime(user.created_at, language=language_code)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"*Telegram ID:* `{user.telegram_id}`\n"
        f"*–ò–º—è:* {user.first_name or ''} {user.last_name or ''}\n"
        f"*Username:* @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {registration_date}\n\n"
    ) if language_code == 'ru' else (
        f"üë§ *Account*\n\n"
        f"*Telegram ID:* `{user.telegram_id}`\n"
        f"*Name:* {user.first_name or ''} {user.last_name or ''}\n"
        f"*Username:* @{user.username or 'not specified'}\n"
        f"*Registration date:* {registration_date}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö eSIM –∏ –∑–∞–∫–∞–∑–æ–≤
    if active_esims:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞
        total_data = sum(esim.total_volume or 0 for esim in active_esims)
        used_data = sum(esim.order_usage or 0 for esim in active_esims)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫
        formatted_total = format_bytes(total_data)
        formatted_used = format_bytes(used_data)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        usage_percent = 0
        if total_data > 0:
            usage_percent = round((used_data / total_data) * 100, 1)
        
        message_text += (
            f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ eSIM: {len(active_esims)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n"
            f"‚Ä¢ –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {formatted_used} –∏–∑ {formatted_total} ({usage_percent}%)\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        ) if language_code == 'ru' else (
            f"*Statistics:*\n"
            f"‚Ä¢ Active eSIMs: {len(active_esims)}\n"
            f"‚Ä¢ Total orders: {len(orders)}\n"
            f"‚Ä¢ Total data: {formatted_used} of {formatted_total} ({usage_percent}%)\n\n"
            f"Choose an action below:"
        )
    else:
        message_text += (
            f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ eSIM: 0\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n\n"
            f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö eSIM.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        ) if language_code == 'ru' else (
            f"*Statistics:*\n"
            f"‚Ä¢ Active eSIMs: 0\n"
            f"‚Ä¢ Total orders: {len(orders)}\n\n"
            f"You don't have any active eSIMs yet.\n"
            f"Choose an action below:"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö eSIM
    builder.button(
        text="üì± –ú–æ–∏ eSIM" if language_code == 'ru' else "üì± My eSIMs",
        callback_data="my_esims"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    builder.button(
        text="üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤" if language_code == 'ru' else "üìã Order History",
        callback_data="order_history"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main Menu",
        callback_data="main_menu"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder.adjust(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AccountMenu.menu)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ eSIM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "my_esims")
async def list_esims(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ eSIM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    if not user:
        logger.error(f"User not found: {callback.from_user.id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" if language_code == 'ru' else "Error: user not found")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ eSIM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_esims = await get_active_esims_for_user(session, user.id)
    
    if not active_esims:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö eSIM
        message_text = (
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö eSIM.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ eSIM –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        ) if language_code == 'ru' else (
            "You don't have any active eSIMs yet.\n\n"
            "You can purchase an eSIM from the main menu."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" if language_code == 'ru' else "üë§ Account",
            callback_data="account"
        )
        builder.button(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main Menu",
            callback_data="main_menu"
        )
        builder.adjust(2)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º eSIM
    message_text = (
        "üì± *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ eSIM:*\n\n"
    ) if language_code == 'ru' else (
        "üì± *Your active eSIMs:*\n\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é eSIM –≤ —Å–ø–∏—Å–æ–∫
    for i, esim in enumerate(active_esims, 1):
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å eSIM
        order = esim.order
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∑–∞–∫–∞–∑–æ–º
        package = order.package
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å
        created_date = format_datetime(esim.created_at, language=language_code)
        status_display = format_esim_status(esim.esim_status, language_code)
        expiration_date = format_expiration_date(esim.expired_time, language_code)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
        total_volume = esim.total_volume or 0
        used_volume = esim.order_usage or 0
        usage_percent = 0
        if total_volume > 0:
            usage_percent = round((used_volume / total_volume) * 100, 1)
        
        formatted_total = format_bytes(total_volume)
        formatted_used = format_bytes(used_volume)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è Markdown
        country_name = escape_markdown(package.country.name)
        status_display = escape_markdown(status_display)
        package_info_ru = escape_markdown(f"{package.data_amount} –ì–ë –Ω–∞ {package.duration} –¥–Ω–µ–π")
        package_info_en = escape_markdown(f"{package.data_amount} GB for {package.duration} days")
        expiration_date = escape_markdown(expiration_date)
        formatted_used = escape_markdown(formatted_used)
        formatted_total = escape_markdown(formatted_total)
        created_date = escape_markdown(created_date)
        iccid = escape_markdown(esim.iccid)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ eSIM –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text += (
            f"*{i}. eSIM {country_name}*\n"
            f"ICCID: `{iccid}`\n"
            f"–°—Ç–∞—Ç—É—Å: {status_display}\n"
            f"–ü–∞–∫–µ—Ç: {package_info_ru}\n"
            f"–¢—Ä–∞—Ñ–∏–∫: {formatted_used} –∏–∑ {formatted_total} ({usage_percent}%)\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {created_date}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiration_date}\n\n"
        ) if language_code == 'ru' else (
            f"*{i}. eSIM {country_name}*\n"
            f"ICCID: `{iccid}`\n"
            f"Status: {status_display}\n"
            f"Package: {package_info_en}\n"
            f"Data: {formatted_used} of {formatted_total} ({usage_percent}%)\n"
            f"Created: {created_date}\n"
            f"Expires: {expiration_date}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π eSIM
        builder.button(
            text=f"üìä –°—Ç–∞—Ç—É—Å eSIM #{i}" if language_code == 'ru' else f"üìä eSIM #{i} Status",
            callback_data=f"check_esim_status:{esim.id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    builder.button(
        text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" if language_code == 'ru' else "üë§ Account",
        callback_data="account"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main Menu",
        callback_data="main_menu"
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder.adjust(2)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ eSIM
@router.callback_query(lambda c: c.data.startswith("check_esim_status:"))
async def check_esim_status(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ eSIM"""
    esim_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    message_text = (
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å eSIM...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    ) if language_code == 'ru' else (
        "‚è≥ Checking eSIM status...\n\n"
        "This may take some time. Please wait."
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=None
    )
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country)
        )
    )
    esim = result.scalars().first()
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å eSIM
    order = esim.order
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∑–∞–∫–∞–∑–æ–º
    package = order.package
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å eSIM —á–µ—Ä–µ–∑ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    esim_status = await esim_service.check_esim_status(esim.esim_tran_no, esim.iccid)
    
    if not esim_status.get('success'):
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.error(f"Failed to get eSIM status: {esim_status.get('error')}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_date = format_datetime(esim.created_at, language=language_code)
        
        message_text = (
            f"üì± *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ eSIM*\n\n"
            f"*–°—Ç—Ä–∞–Ω–∞:* {package.country.name}\n"
            f"*–ü–∞–∫–µ—Ç:* {package.data_amount} –ì–ë –Ω–∞ {package.duration} –¥–Ω–µ–π\n"
            f"*ICCID:* `{esim.iccid}`\n"
            f"*–°—Ç–∞—Ç—É—Å:* {format_esim_status(esim.esim_status, language_code)}\n"
            f"*–°–æ–∑–¥–∞–Ω–∞:* {created_date}\n\n"
            f"‚ùó *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å eSIM*\n"
            f"–û—à–∏–±–∫–∞: {esim_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        ) if language_code == 'ru' else (
            f"üì± *eSIM Information*\n\n"
            f"*Country:* {package.country.name}\n"
            f"*Package:* {package.data_amount} GB for {package.duration} days\n"
            f"*ICCID:* `{esim.iccid}`\n"
            f"*Status:* {format_esim_status(esim.esim_status, language_code)}\n"
            f"*Created:* {created_date}\n\n"
            f"‚ùó *Failed to get current eSIM status*\n"
            f"Error: {esim_status.get('error', 'Unknown error')}\n\n"
            f"Showing last known data."
        )
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ eSIM –≤ –ë–î
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
        status_mapping = {
            "IN_USE": "ACTIVATED",
            "INSTALLATION": "PROCESSING",
            "ENABLED": "ACTIVATED",  
            "GOT_RESOURCE": "READY",
            "CANCEL": "CANCELED",
            "RELEASED": "CANCELED"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å eSIM –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        api_esim_status = esim_status.get('esim_status', esim.esim_status)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
        if api_esim_status in status_mapping:
            mapped_status = status_mapping[api_esim_status]
            logger.info(f"Mapped status from {api_esim_status} to {mapped_status}")
            esim.esim_status = mapped_status
        else:
            esim.esim_status = api_esim_status
            
        esim.order_usage = esim_status.get('order_usage', esim.order_usage)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è eSIM, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ API
        if esim_status.get('expired_time'):
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
                expired_time_str = esim_status.get('expired_time')
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                if 'Z' in expired_time_str:
                    expired_time_str = expired_time_str.replace('Z', '+00:00')
                if '+' not in expired_time_str and 'T' in expired_time_str:
                    expired_time_str = expired_time_str + '+00:00'
                
                expired_time = datetime.fromisoformat(expired_time_str)
                # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                expired_time = expired_time.replace(tzinfo=None)
                esim.expired_time = expired_time
                logger.info(f"Updated eSIM expiration date: {expired_time}")
            except (ValueError, TypeError) as e:
                logger.error(f"Error parsing expired_time: {esim_status.get('expired_time')} - {e}")
        
        esim.updated_at = datetime.utcnow()
        await session.commit()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        created_date = format_datetime(esim.created_at, language=language_code)
        updated_date = format_datetime(esim.updated_at, language=language_code)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
        total_volume = esim_status.get('total_volume', 0)
        used_volume = esim_status.get('order_usage', 0)
        usage_percent = esim_status.get('usage_percent', 0)
        
        formatted_total = format_bytes(total_volume)
        formatted_used = format_bytes(used_volume)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ eSIM
        esim_status_text = esim_status.get('esim_status', 'UNKNOWN')
        status_display = format_esim_status(esim_status_text, language_code)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        expiration_date = format_expiration_date(esim.expired_time, language_code)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è Markdown
        country_name = escape_markdown(package.country.name)
        package_info = f"{package.data_amount} –ì–ë –Ω–∞ {package.duration} –¥–Ω–µ–π" if language_code == 'ru' else f"{package.data_amount} GB for {package.duration} days"
        package_info = escape_markdown(package_info)
        status_display = escape_markdown(status_display)
        created_date = escape_markdown(created_date)
        updated_date = escape_markdown(updated_date)
        expiration_date = escape_markdown(expiration_date)
        formatted_used = escape_markdown(formatted_used)
        formatted_total = escape_markdown(formatted_total)
        iccid = escape_markdown(esim.iccid)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ eSIM
        message_text = (
            f"üì± *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ eSIM*\n\n"
            f"*–°—Ç—Ä–∞–Ω–∞:* {country_name}\n"
            f"*–ü–∞–∫–µ—Ç:* {package_info}\n"
            f"*ICCID:* `{iccid}`\n"
            f"*–°—Ç–∞—Ç—É—Å:* {status_display}\n"
            f"*–°–æ–∑–¥–∞–Ω–∞:* {created_date}\n"
            f"*–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {updated_date}\n"
            f"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞:*\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {formatted_used} –∏–∑ {formatted_total} ({usage_percent}%)\n"
            f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {expiration_date}\n\n"
        ) if language_code == 'ru' else (
            f"üì± *eSIM Information*\n\n"
            f"*Country:* {country_name}\n"
            f"*Package:* {package_info}\n"
            f"*ICCID:* `{iccid}`\n"
            f"*Status:* {status_display}\n"
            f"*Created:* {created_date}\n"
            f"*Updated:* {updated_date}\n"
            f"*Data Usage:*\n"
            f"Used: {formatted_used} of {formatted_total} ({usage_percent}%)\n"
            f"*Expires:* {expiration_date}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ QR-–∫–æ–¥–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if esim.qr_code_url:
            message_text += (
                "\n*QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥.\n"
            ) if language_code == 'ru' else (
                "\n*QR Code for activation:*\n"
                "Click the button below to get the QR code.\n"
            )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if esim.qr_code_url:
        builder.button(
            text="üì≤ –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥" if language_code == 'ru' else "üì≤ Show QR Code",
            callback_data=f"show_qr_code:{esim.id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    builder.button(
        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å" if language_code == 'ru' else "üîÑ Refresh Status",
        callback_data=f"check_esim_status:{esim.id}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è eSIM
    builder.button(
        text="üîã –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫" if language_code == 'ru' else "üîã Top Up Data",
        callback_data=f"topup_esim:{esim.id}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É eSIM
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
        callback_data="my_esims"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main Menu",
        callback_data="main_menu"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: 2 –≤ —Ä—è–¥, –∑–∞—Ç–µ–º 1, –∑–∞—Ç–µ–º 2 –≤ —Ä—è–¥
    if esim.qr_code_url:
        builder.adjust(2, 1, 2)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç QR-–∫–æ–¥–∞, —Ç–æ –ø–µ—Ä–≤—ã–π —Ä—è–¥ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
        builder.adjust(1, 1, 2)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞ eSIM
@router.callback_query(lambda c: c.data.startswith("show_qr_code:"))
async def show_qr_code(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞ eSIM"""
    esim_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country)
        )
    )
    esim = result.scalars().first()
    if not esim or not esim.qr_code_url:
        logger.error(f"eSIM or QR code not found: {esim_id}")
        await callback.answer(
            "QR-–∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" if language_code == 'ru' else "QR code not available",
            show_alert=True
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–∞–∫–µ—Ç
    order = esim.order
    package = order.package
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    status_display = format_esim_status(esim.esim_status, language_code)
    expiration_date = format_expiration_date(esim.expired_time, language_code)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è Markdown
    iccid = escape_markdown(esim.iccid)
    country_name = escape_markdown(package.country.name)
    package_info_ru = escape_markdown(f"{package.data_amount} –ì–ë –Ω–∞ {package.duration} –¥–Ω–µ–π")
    package_info_en = escape_markdown(f"{package.data_amount} GB for {package.duration} days")
    expiration_date = escape_markdown(expiration_date)
    qr_code_url = escape_markdown(esim.qr_code_url)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ QR-–∫–æ–¥—É
    caption = (
        f"üì± *QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ eSIM*\n\n"
        f"*ICCID:* `{iccid}`\n"
        f"*–°—Ç—Ä–∞–Ω–∞:* {country_name}\n"
        f"*–ü–∞–∫–µ—Ç:* {package_info_ru}\n"
        f"*–°—Ç–∞—Ç—É—Å:* {status_display}\n"
        f"üì≤ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n"
        f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        f"2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å' –∏–ª–∏ 'SIM-–∫–∞—Ä—Ç—ã'\n"
        f"3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω' –∏–ª–∏ '–î–æ–±–∞–≤–∏—Ç—å eSIM'\n"
        f"4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥\n"
        f"5. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ\n\n"
        f"‚ùó –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥, –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n"
        f"*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {expiration_date}"
    ) if language_code == 'ru' else (
        f"üì± *QR code for eSIM activation*\n\n"
        f"*ICCID:* `{iccid}`\n"
        f"*Country:* {country_name}\n"
        f"*Package:* {package_info_en}\n"
        f"*Status:* {status_display}\n"
        f"üì≤ *Activation instructions:*\n"
        f"1. Open your phone settings\n"
        f"2. Go to 'Cellular' or 'SIM cards' section\n"
        f"3. Select 'Add Cellular Plan' or 'Add eSIM'\n"
        f"4. Scan this QR code\n"
        f"5. Follow the on-screen instructions\n\n"
        f"‚ùó Save this QR code, you may need it for reactivation\n"
        f"*Expires:* {expiration_date}"
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∫–∞–∫ —Ñ–æ—Ç–æ
        await callback.message.answer_photo(
            photo=esim.qr_code_url,
            caption=caption,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error sending QR code: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            (
                f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ*\n\n"
                f"*ICCID:* `{iccid}`\n"
                f"*–°—Ç–∞—Ç—É—Å:* {status_display}\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ QR-–∫–æ–¥: {qr_code_url}\n\n"
                f"–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, –æ–Ω–∞ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ eSIM."
            ) if language_code == 'ru' else (
                f"‚ùå *Failed to send QR code as an image*\n\n"
                f"*ICCID:* `{iccid}`\n"
                f"*Status:* {status_display}\n\n"
                f"QR code link: {qr_code_url}\n\n"
                f"Save this link, you may need it for eSIM activation."
            ),
            parse_mode="Markdown"
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ eSIM
@router.callback_query(lambda c: c.data.startswith("view_esim:"))
async def view_esim_info(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ eSIM"""
    esim_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country),
            joinedload(ESim.order).joinedload(Order.user)
        )
    )
    esim = result.scalars().first()
    
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                await callback.answer()
            else:
                # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                raise
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç –∏ —Å—Ç—Ä–∞–Ω—É
    package = esim.order.package
    country = package.country
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å eSIM —á–µ—Ä–µ–∑ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    esim_status = await esim_service.check_esim_status(esim.esim_tran_no, esim.iccid)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    created_date = format_datetime(esim.created_at, language=language_code)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ eSIM
    if esim_status.get('success'):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å eSIM –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if 'smdpStatus' in esim_status:
            esim.esim_status = esim_status['smdpStatus']
            await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        data_balance = esim_status.get('dataBalance', 'N/A')
        data_used = esim_status.get('dataUsed', 'N/A')
        expiry_date = esim_status.get('expiryDate', None)
        
        if expiry_date:
            expiry_date = format_datetime(expiry_date, language=language_code)
        else:
            expiry_date = "N/A"
        
        message_text = (
            f"üì± <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ eSIM</b>\n\n"
            f"–°—Ç—Ä–∞–Ω–∞: {country.flag_emoji} {country.name}\n"
            f"–ü–∞–∫–µ—Ç: {package.data_amount} –ì–ë –Ω–∞ {package.duration} –¥–Ω–µ–π\n"
            f"ICCID: <code>{esim.iccid}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: {format_esim_status(esim.esim_status, language_code)}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {created_date}\n\n"
            f"–ë–∞–ª–∞–Ω—Å —Ç—Ä–∞—Ñ–∏–∫–∞: {data_balance}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {data_used}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_date}"
        ) if language_code == 'ru' else (
            f"üì± <b>eSIM Information</b>\n\n"
            f"Country: {country.flag_emoji} {country.name}\n"
            f"Package: {package.data_amount} GB for {package.duration} days\n"
            f"ICCID: <code>{esim.iccid}</code>\n"
            f"Status: {format_esim_status(esim.esim_status, language_code)}\n"
            f"Created: {created_date}\n\n"
            f"Data Balance: {data_balance}\n"
            f"Data Used: {data_used}\n"
            f"Valid Until: {expiry_date}"
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.error(f"Failed to get eSIM status: {esim_status.get('error')}")
        
        message_text = (
            f"üì± <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ eSIM</b>\n\n"
            f"–°—Ç—Ä–∞–Ω–∞: {country.flag_emoji} {country.name}\n"
            f"–ü–∞–∫–µ—Ç: {package.data_amount} –ì–ë –Ω–∞ {package.duration} –¥–Ω–µ–π\n"
            f"ICCID: <code>{esim.iccid}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: {format_esim_status(esim.esim_status, language_code)}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {created_date}\n\n"
            f"‚ùó <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å eSIM</b>\n"
            f"–û—à–∏–±–∫–∞: {esim_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        ) if language_code == 'ru' else (
            f"üì± <b>eSIM Information</b>\n\n"
            f"Country: {country.flag_emoji} {country.name}\n"
            f"Package: {package.data_amount} GB for {package.duration} days\n"
            f"ICCID: <code>{esim.iccid}</code>\n"
            f"Status: {format_esim_status(esim.esim_status, language_code)}\n"
            f"Created: {created_date}\n\n"
            f"‚ùó <b>Failed to get current eSIM status</b>\n"
            f"Error: {esim_status.get('error', 'Unknown error')}\n\n"
            f"Showing last known data."
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
    builder.button(
        text="üîã –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫" if language_code == 'ru' else "üîã Top Up Data",
        callback_data=f"topup_esim:{esim_id}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ QR-–∫–æ–¥–∞
    builder.button(
        text="üì≤ QR-–∫–æ–¥" if language_code == 'ru' else "üì≤ QR Code",
        callback_data=f"qr_code:{esim_id}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É eSIM
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
        callback_data="my_esims"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main Menu",
        callback_data="main_menu"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –¥–≤–µ –≤ —Ä—è–¥)
    builder.adjust(2)
    
    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            await callback.answer()
        else:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "order_history")
async def order_history(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
    page = 1
    await state.update_data(order_history_page=page)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    if not user:
        logger.error(f"User not found: {callback.from_user.id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" if language_code == 'ru' else "Error: user not found")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
    result = await session.execute(
        select(Order)
        .where(Order.user_id == user.id)
        .options(
            joinedload(Order.package).joinedload(Package.country),
            joinedload(Order.esim)
        )
        .order_by(desc(Order.created_at))
    )
    orders = result.unique().scalars().all()
    
    if not orders:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
        message_text = (
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ eSIM –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        ) if language_code == 'ru' else (
            "You don't have any orders yet.\n\n"
            "You can purchase an eSIM from the main menu."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main Menu",
            callback_data="main_menu"
        )
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
            callback_data="account"
        )
        builder.adjust(1)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await state.update_data(all_orders_ids=[order.id for order in orders])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await display_orders_page(callback, state, session, orders, page, language_code)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
async def display_orders_page(callback: CallbackQuery, state: FSMContext, session: AsyncSession, 
                             orders: list, page: int, language_code: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    orders_per_page = 10
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(orders) + orders_per_page - 1) // orders_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * orders_per_page
    end_idx = min(start_idx + orders_per_page, len(orders))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_page_orders = orders[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–∞–∑–æ–≤
    message_text = (
        "üìã *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤*\n\n"
    ) if language_code == 'ru' else (
        "üìã *Order History*\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for i, order in enumerate(current_page_orders, start_idx + 1):
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∑–∞–∫–∞–∑–æ–º
        package = order.package
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_date = format_datetime(order.created_at, language=language_code)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        status_text = order.status
        if language_code == 'ru':
            status_display = {
                OrderStatus.CREATED.value: "üîÑ –°–æ–∑–¥–∞–Ω",
                OrderStatus.AWAITING_PAYMENT.value: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
                OrderStatus.PAID.value: "üí∞ –û–ø–ª–∞—á–µ–Ω",
                OrderStatus.PROCESSING.value: "‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
                OrderStatus.COMPLETED.value: "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω",
                OrderStatus.FAILED.value: "‚ùå –û—à–∏–±–∫–∞",
                OrderStatus.CANCELED.value: "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
            }.get(status_text, status_text)
        else:
            status_display = {
                OrderStatus.CREATED.value: "üîÑ Created",
                OrderStatus.AWAITING_PAYMENT.value: "‚è≥ Pending payment",
                OrderStatus.PAID.value: "üí∞ Paid",
                OrderStatus.PROCESSING.value: "‚öôÔ∏è Processing",
                OrderStatus.COMPLETED.value: "‚úÖ Completed",
                OrderStatus.FAILED.value: "‚ùå Failed",
                OrderStatus.CANCELED.value: "‚ùå Canceled"
            }.get(status_text, status_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text += (
            f"*{i}. –ó–∞–∫–∞–∑ #{order.id}*\n"
            f"–°—Ç—Ä–∞–Ω–∞: {package.country.name}\n"
            f"–ü–∞–∫–µ—Ç: {package.data_amount} –ì–ë –Ω–∞ {package.duration} –¥–Ω–µ–π\n"
            f"–°—É–º–º–∞: ${order.amount:.2f}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_display}\n"
            f"–î–∞—Ç–∞: {created_date}\n\n"
        ) if language_code == 'ru' else (
            f"*{i}. Order #{order.id}*\n"
            f"Country: {package.country.name}\n"
            f"Package: {package.data_amount} GB for {package.duration} days\n"
            f"Amount: ${order.amount:.2f}\n"
            f"Status: {status_display}\n"
            f"Date: {created_date}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    message_text += (
        f"_–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages} (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)})_\n\n"
    ) if language_code == 'ru' else (
        f"_Page {page} of {total_pages} (total orders: {len(orders)})_\n\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    if total_pages > 1:
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page > 1:
            nav_buttons.append({
                "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Previous",
                "callback_data": f"order_page:{page-1}"
            })
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page < total_pages:
            nav_buttons.append({
                "text": "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è" if language_code == 'ru' else "Next ‚ñ∂Ô∏è",
                "callback_data": f"order_page:{page+1}"
            })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ builder
    for button in nav_buttons:
        builder.button(text=button["text"], callback_data=button["callback_data"])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    builder.button(
        text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" if language_code == 'ru' else "üë§ Account",
        callback_data="account"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main Menu",
        callback_data="main_menu"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, —Ç–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∏—Ö –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
    # –ê –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É
    if len(nav_buttons) == 2:
        builder.adjust(2, 2)  # –î–≤–∞ —Ä—è–¥–∞ –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    elif len(nav_buttons) == 1:
        builder.adjust(1, 2)  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, –≤—Ç–æ—Ä–æ–π —Ä—è–¥ - –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    else:
        builder.adjust(2)  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AccountMenu.orders)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data.startswith("order_page:"))
async def switch_order_page(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    all_orders_ids = user_data.get("all_orders_ids", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    if not user:
        logger.error(f"User not found: {callback.from_user.id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" if language_code == 'ru' else "Error: user not found")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Ö ID
    result = await session.execute(
        select(Order)
        .where(Order.id.in_(all_orders_ids))
        .options(
            joinedload(Order.package).joinedload(Package.country),
            joinedload(Order.esim)
        )
        .order_by(desc(Order.created_at))
    )
    orders = result.unique().scalars().all()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_history_page=page)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await display_orders_page(callback, state, session, orders, page, language_code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ eSIM
@router.callback_query(lambda c: c.data.startswith("topup_esim:"))
async def topup_esim(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ eSIM"""
    esim_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country),
            joinedload(ESim.order).joinedload(Order.user)
        )
    )
    esim = result.scalars().first()
    
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø–∞–∫–µ—Ç–∞ eSIM
    country = esim.order.package.country
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
    packages_result = await session.execute(
        select(Package)
        .where(
            Package.country_id == country.id,
            Package.is_available == True
        )
        .order_by(Package.price)
    )
    packages = packages_result.scalars().all()
    
    if not packages:
        message_text = (
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ "
            f"–¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country.name}.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        ) if language_code == 'ru' else (
            "‚ùå Unfortunately, there are no available packages to top up data "
            f"for {country.name} at the moment.\n\n"
            "Please try again later or contact support."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
            callback_data=f"view_esim:{esim.id}"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID eSIM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(topup_esim_id=esim.id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞
    await state.set_state(TopUpESim.select_duration)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
    title = (
        f"üîã <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è eSIM</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∞: {country.flag_emoji} {country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:"
    ) if language_code == 'ru' else (
        f"üîã <b>Top Up Data for eSIM</b>\n\n"
        f"Country: {country.flag_emoji} {country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n\n"
        f"Select package duration:"
    )
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    durations = set()
    for package in packages:
        durations.add(package.duration)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    durations = sorted(durations)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for duration in durations:
        if language_code == 'ru':
            button_text = f"üìÖ {duration} –¥–Ω–µ–π"
        else:
            button_text = f"üìÖ {duration} days"
        
        builder.button(
            text=button_text,
            callback_data=f"topup_select_duration:{esim.id}:{duration}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É eSIM
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
        callback_data=f"check_esim_status:{esim.id}"
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder.adjust(2)
    
    try:
        await callback.message.edit_text(
            title,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            await callback.answer()
        else:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("topup_select_duration:"))
async def select_duration(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"""
    esim_id = int(callback.data.split(":")[1])
    duration = int(callback.data.split(":")[2])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country)
        )
    )
    esim = result.scalars().first()
    
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    packages_result = await session.execute(
        select(Package)
        .where(
            Package.country_id == esim.order.package.country_id,
            Package.duration == duration,
            Package.is_available == True
        )
        .order_by(Package.price)
    )
    packages = packages_result.scalars().all()
    
    if not packages:
        message_text = (
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ "
            f"–¥–ª—è —Å—Ç—Ä–∞–Ω—ã {esim.order.package.country.name} –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        ) if language_code == 'ru' else (
            "‚ùå Unfortunately, there are no available packages to top up data "
            f"for {esim.order.package.country.name} and the selected duration at the moment.\n\n"
            "Please try again later or contact support."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
            callback_data=f"topup_esim:{esim.id}"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID eSIM –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(topup_duration=duration)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
    await state.set_state(TopUpESim.select_package)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
    title = (
        f"üîã <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è eSIM</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∞: {esim.order.package.country.flag_emoji} {esim.order.package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞:"
    ) if language_code == 'ru' else (
        f"üîã <b>Top Up Data for eSIM</b>\n\n"
        f"Country: {esim.order.package.country.flag_emoji} {esim.order.package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n"
        f"Duration: {duration} days\n\n"
        f"Select a package to top up data:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    for package in packages:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        price_text = f"{package.price:.2f} USD"
        data_text = f"{package.data_amount} GB"
        
        button_text = f"{data_text} - {price_text}"
        
        builder.button(
            text=button_text,
            callback_data=f"select_topup_package:{package.id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
        callback_data=f"back_to_duration_selection:{esim.id}"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –¥–≤–µ –≤ —Ä—è–¥)
    builder.adjust(2)
    
    try:
        await callback.message.edit_text(
            title,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            await callback.answer()
        else:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(TopUpESim.select_package, lambda c: c.data.startswith("select_topup_package:"))
async def select_topup_package(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"""
    package_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    esim_id = user_data.get("topup_esim_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç –∏–∑ –ë–î
    result = await session.execute(
        select(Package)
        .where(Package.id == package_id)
        .options(
            joinedload(Package.country)
        )
    )
    package = result.scalars().first()
    
    if not package:
        logger.error(f"Package not found: {package_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: package not found.\n\n"
            "Please return to package selection and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
            callback_data=f"topup_esim:{esim_id}"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country)
        )
    )
    esim = result.scalars().first()
    
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∞–∫–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(topup_package_id=package_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    await state.set_state(TopUpESim.confirm_payment)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    price_text = f"{package.price:.2f} USD"
    data_text = f"{package.data_amount} GB"
    validity_text = f"{package.duration} –¥–Ω–µ–π" if language_code == 'ru' else f"{package.duration} days"
    
    message_text = (
        f"üîã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∞: {package.country.flag_emoji} {package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n\n"
        f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç:</b>\n"
        f"‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {data_text}\n"
        f"‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {validity_text}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_text}\n\n"
        f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª."
    ) if language_code == 'ru' else (
        f"üîã <b>Confirm Data Top Up</b>\n\n"
        f"Country: {package.country.flag_emoji} {package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n\n"
        f"<b>Selected package:</b>\n"
        f"‚Ä¢ Data: {data_text}\n"
        f"‚Ä¢ Validity: {validity_text}\n"
        f"‚Ä¢ Price: {price_text}\n\n"
        f"To confirm and proceed to payment, click the 'Pay' button."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
    builder.button(
        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å" if language_code == 'ru' else "üí≥ Pay",
        callback_data="confirm_topup_payment"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
        callback_data=f"topup_select_duration:{esim.id}:{package.duration}"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            await callback.answer()
        else:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            raise
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
@router.callback_query(F.data == "confirm_topup_payment", TopUpESim.confirm_payment)
async def confirm_topup_payment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"""
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    esim_id = user_data.get("topup_esim_id")
    package_id = user_data.get("topup_package_id")
    
    if not esim_id or not package_id:
        logger.error(f"Missing esim_id or package_id in state: {user_data}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: insufficient data to create an order.\n\n"
            "Please return to package selection and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
            callback_data=f"topup_esim:{esim_id}"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country),
            joinedload(ESim.order).joinedload(Order.user)
        )
    )
    esim = result.scalars().first()
    
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç –∏–∑ –ë–î
    result = await session.execute(
        select(Package)
        .where(Package.id == package_id)
        .options(
            joinedload(Package.country)
        )
    )
    package = result.scalars().first()
    
    if not package:
        logger.error(f"Package not found: {package_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: package not found.\n\n"
            "Please return to package selection and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
            callback_data=f"topup_esim:{esim.id}"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
    new_order = Order(
        user_id=esim.order.user_id,
        package_id=package.id,
        transaction_id=f"topup-{esim.iccid}-{int(datetime.utcnow().timestamp())}",
        status=OrderStatus.CREATED.value,
        amount=package.price,
        created_at=datetime.utcnow(),
        order_type=OrderType.TOPUP.value  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –∫–∞–∫ TOPUP
    )
    
    session.add(new_order)
    await session.commit()
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É
    country_name = package.country.name if package.country else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"
    country_flag = package.country.flag_emoji if package.country else "üåç"
    
    message_text = (
        f"ÔøΩ *–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç:*\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name}\n"
        f"üì± ICCID: {esim.iccid}\n"
        f"üìä –î–∞–Ω–Ω—ã–µ: {package.data_amount} –ì–ë\n"
        f"‚è±Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {package.duration} –¥–Ω–µ–π\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${package.price:.2f}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    ) if language_code == 'ru' else (
        f"ÔøΩ *Selected package:*\n"
        f"üåç Country: {country_name}\n"
        f"üì± ICCID: {esim.iccid}\n"
        f"üìä Data: {package.data_amount} GB\n"
        f"‚è±Ô∏è Duration: {package.duration} days\n"
        f"üí∞ Price: ${package.price:.2f}\n\n"
        f"Choose payment method:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    builder = InlineKeyboardBuilder()
    
    if language_code == 'ru':
        builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (CryptoBot)", callback_data=f"payment:ton:{new_order.id}")
        builder.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞", callback_data=f"back_to_package_selection:{esim.id}")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    else:
        builder.button(text="üí≥ Pay with Crypto (CryptoBot)", callback_data=f"payment:ton:{new_order.id}")
        builder.button(text="‚Ü©Ô∏è Back to package selection", callback_data=f"back_to_package_selection:{esim.id}")
        builder.button(text="üè† Main menu", callback_data="main_menu")
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    await state.update_data(order_id=new_order.id)
    await state.set_state(TopUpESim.select_payment)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("back_to_package_select:"))
async def back_to_package_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞"""
    esim_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    duration = user_data.get("topup_duration")
    
    if not duration:
        logger.error("Duration not found in state")
        await callback.answer(
            "–û—à–∏–±–∫–∞: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" if language_code == 'ru' else "Error: duration not found",
            show_alert=True
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country)
        )
    )
    esim = result.scalars().first()
    
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    packages_result = await session.execute(
        select(Package)
        .where(
            Package.country_id == esim.order.package.country_id,
            Package.duration == duration,
            Package.is_available == True
        )
        .order_by(Package.price)
    )
    packages = packages_result.scalars().all()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
    await state.set_state(TopUpESim.select_package)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
    title = (
        f"üîã <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è eSIM</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∞: {esim.order.package.country.flag_emoji} {esim.order.package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞:"
    ) if language_code == 'ru' else (
        f"üîã <b>Top Up Data for eSIM</b>\n\n"
        f"Country: {esim.order.package.country.flag_emoji} {esim.order.package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n"
        f"Duration: {duration} days\n\n"
        f"Select a package to top up data:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    for package in packages:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        price_text = f"{package.price:.2f} USD"
        data_text = f"{package.data_amount} GB"
        
        button_text = f"{data_text} - {price_text}"
        
        builder.button(
            text=button_text,
            callback_data=f"select_topup_package:{package.id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
        callback_data=f"back_to_duration_selection:{esim.id}"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –¥–≤–µ –≤ —Ä—è–¥—É)
    builder.adjust(2)
    
    await callback.message.edit_text(
        title,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


async def get_available_durations(session, country_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    result = await session.execute(
        select(Package.duration)
        .where(Package.country_id == country_id)
        .where(Package.is_available == True)
        .distinct()
        .order_by(Package.duration)
    )
    return [duration for duration, in result.all()]



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
@router.callback_query(lambda c: c.data.startswith("back_to_duration_selection:"))
async def back_to_duration_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    esim_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country)
        )
    )
    esim = result.scalars().first()
    
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await state.update_data(topup_duration=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–æ–≤
    durations = await get_available_durations(session, esim.order.package.country_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await state.set_state(TopUpESim.select_duration)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID eSIM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(topup_esim_id=esim.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
    title = (
        f"üîã <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è eSIM</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∞: {esim.order.package.country.flag_emoji} {esim.order.package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:"
    ) if language_code == 'ru' else (
        f"üîã <b>Top Up Data for eSIM</b>\n\n"
        f"Country: {esim.order.package.country.flag_emoji} {esim.order.package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n\n"
        f"Select package duration:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for duration in durations:
        button_text = f"üìÖ {duration} –¥–Ω–µ–π" if language_code == 'ru' else f"üìÖ {duration} days"
        builder.button(
            text=button_text,
            callback_data=f"topup_select_duration:{esim.id}:{duration}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
        callback_data=f"check_esim_status:{esim.id}"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    builder.adjust(2)
    
    await callback.message.edit_text(
        title,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ TON (CryptoBot)
@router.callback_query(lambda c: c.data.startswith("payment:ton:"))
async def process_ton_payment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ TON (CryptoBot)"""
    order_id = int(callback.data.split(":")[2])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    result = await session.execute(
        select(Order)
        .options(
            joinedload(Order.package).joinedload(Package.country),
            joinedload(Order.user)
        )
        .where(Order.id == order_id)
    )
    order = result.scalar_one_or_none()
    
    if not order:
        logger.error(f"Order not found: {order_id}")
        await callback.answer(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" if language_code == 'ru' else "‚ùå Order not found",
            show_alert=True
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
        invoice = await crypto_bot.create_invoice(
            asset="TON",
            amount=order.package.price,
            description=(
                f"{'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞' if order.order_type == OrderType.TOPUP.value else '–ü–æ–∫—É–ø–∫–∞ eSIM'}\n"
                f"–°—Ç—Ä–∞–Ω–∞: {order.package.country.flag_emoji} {order.package.country.name}\n"
                f"–ü–∞–∫–µ—Ç: {order.package.data_amount} GB –Ω–∞ {order.package.duration} –¥–Ω–µ–π"
            ),
            payload=f"{order.id}",
            allow_anonymous=False,
            expires_in=3600
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.payment_url = invoice.pay_url
        order.status = OrderStatus.PENDING.value
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
        message_text = (
            f"üí≥ <b>{'–û–ø–ª–∞—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞' if order.order_type == OrderType.TOPUP.value else '–û–ø–ª–∞—Ç–∞ eSIM'}</b>\n\n"
            f"–°—Ç—Ä–∞–Ω–∞: {order.package.country.flag_emoji} {order.package.country.name}\n"
            f"–ü–∞–∫–µ—Ç: {order.package.data_amount} GB –Ω–∞ {order.package.duration} –¥–Ω–µ–π\n"
            f"–°—É–º–º–∞: {order.package.price:.2f} USD\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
        ) if language_code == 'ru' else (
           f"üí≥ <b>{'Data Top-Up Payment' if order.order_type == OrderType.TOPUP.value else 'eSIM Payment'}</b>\n\n"
            f"Country: {order.package.country.flag_emoji} {order.package.country.name}\n"
            f"Package: {order.package.data_amount} GB for {order.package.duration} days\n"
            f"Amount: {order.package.price:.2f} USD\n\n"
            f"Click the button below to pay üëá"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
           text="üíé –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ TON" if language_code == 'ru' else "üíé Pay with TON",
            url=invoice.pay_url
        )
        if order.order_type == OrderType.TOPUP.value:
            user_data = await state.get_data()
            esim_id = user_data.get("topup_esim_id")
            if esim_id:
                builder.button(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
                    callback_data=f"back_to_package_selection:{esim_id}"
                )
            else:
                builder.button(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
                    callback_data="my_esims"
                )
        else:
            builder.button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
                callback_data=f"check_order_status:{order.id}"
            )
        builder.adjust(1)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error creating TON invoice: {e}")
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞" if language_code == 'ru' else "‚ùå Error creating invoice",
            show_alert=True
        )
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
@router.callback_query(lambda c: c.data.startswith("payment:crypto:"))
async def process_crypto_payment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
    order_id = int(callback.data.split(":")[2])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
    result = await session.execute(
        select(Order)
        .where(Order.id == order_id)
        .options(
            joinedload(Order.package).joinedload(Package.country),
            joinedload(Order.user)
        )
    )
    order = result.scalars().first()
    
    if not order:
        logger.error(f"Order not found: {order_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        ) if language_code == 'ru' else (
            "‚ùå Error: order not found.\n\n"
            "Please start over."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main menu",
            callback_data="main_menu"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        await state.set_state(MainMenu.menu)
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
    # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    message_text = (
        "üöß –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
    ) if language_code == 'ru' else (
        "üöß Payment via cryptocurrency is under development.\n\n"
        "Please choose another payment method or come back later."
    )
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM ID –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    esim_id = user_data.get("topup_esim_id")
    
    if language_code == 'ru':
        builder.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞", callback_data=f"back_to_package_selection:{esim_id}")
        builder.button(text="üíé –û–ø–ª–∞—Ç–∏—Ç—å TON (CryptoBot)", callback_data=f"payment:ton:{order_id}")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    else:
        builder.button(text="‚Ü©Ô∏è Back to package selection", callback_data=f"back_to_package_selection:{esim_id}")
        builder.button(text="üíé Pay with TON (CryptoBot)", callback_data=f"payment:ton:{order_id}")
        builder.button(text="üè† Main menu", callback_data="main_menu")
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("back_to_package_selection:"))
async def back_to_package_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞"""
    esim_id = int(callback.data.split(":")[1])
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    duration = user_data.get("topup_duration")
    
    if not duration:
        logger.error("Duration not found in state")
        await callback.answer(
            "–û—à–∏–±–∫–∞: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" if language_code == 'ru' else "Error: duration not found",
            show_alert=True
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º eSIM –∏–∑ –ë–î
    result = await session.execute(
        select(ESim)
        .where(ESim.id == esim_id)
        .options(
            joinedload(ESim.order).joinedload(Order.package).joinedload(Package.country)
        )
    )
    esim = result.scalars().first()
    
    if not esim:
        logger.error(f"eSIM not found: {esim_id}")
        message_text = (
            "‚ùå –û—à–∏–±–∫–∞: eSIM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ eSIM –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ) if language_code == 'ru' else (
            "‚ùå Error: eSIM not found.\n\n"
            "Please return to the eSIM list and try again."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if language_code == 'ru' else "‚óÄÔ∏è Back to list",
            callback_data="my_esims"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    packages_result = await session.execute(
        select(Package)
        .where(
            Package.country_id == esim.order.package.country_id,
            Package.duration == duration,
            Package.is_available == True
        )
        .order_by(Package.price)
    )
    packages = packages_result.scalars().all()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
    await state.set_state(TopUpESim.select_package)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏
    title = (
        f"üîã <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è eSIM</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∞: {esim.order.package.country.flag_emoji} {esim.order.package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –¥–Ω–µ–π\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞:"
    ) if language_code == 'ru' else (
        f"üîã <b>Top Up Data for eSIM</b>\n\n"
        f"Country: {esim.order.package.country.flag_emoji} {esim.order.package.country.name}\n"
        f"ICCID: <code>{esim.iccid}</code>\n"
        f"Duration: {duration} days\n\n"
        f"Select a package to top up data:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    for package in packages:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        price_text = f"{package.price:.2f} USD"
        data_text = f"{package.data_amount} GB"
        
        button_text = f"{data_text} - {price_text}"
        
        builder.button(
            text=button_text,
            callback_data=f"select_topup_package:{package.id}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚óÄÔ∏è Back",
        callback_data=f"back_to_duration_selection:{esim.id}"
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –¥–≤–µ –≤ —Ä—è–¥—É)
    builder.adjust(2)
    
    await callback.message.edit_text(
        title,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )