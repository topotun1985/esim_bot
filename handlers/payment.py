from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import uuid
from datetime import datetime
import os
import logging

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload

from database.models import Order, Package, User, OrderStatus, ESim
from database.queries import get_user_by_telegram_id, get_package_by_id, get_all_countries
from utils.states import BuyESim, PaymentState, CallbackData, MainMenu
from services.payment_service import create_ton_invoice, create_cryptomus_invoice, check_ton_payment, create_crypto_invoice
from handlers.catalog import get_countries_keyboard
from handlers.start import get_main_menu_keyboard
from services.esim_service import esim_service

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data == "payment:ton")
async def process_payment_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_data = await state.get_data()
    package_id = user_data.get("package_id")
    language_code = user_data.get("language_code", "ru")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    package = await get_package_by_id(session, package_id)
    user = await get_user_by_telegram_id(session, callback.from_user.id)

    if not package or not user:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ." if language_code == 'ru' else
            "An error occurred. Please start over.",
            reply_markup=get_main_menu_keyboard(language_code)
        )
        await state.set_state(MainMenu.menu)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
    checking_message = (
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ eSIM...\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    ) if language_code == 'ru' else (
        "‚è≥ Checking eSIM availability...\n\n"
        "Please wait."
    )
    
    await callback.message.edit_text(
        checking_message,
        parse_mode="Markdown"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    has_sufficient_balance = await esim_service.check_balance_before_operation("create eSIM")
    
    if not has_sufficient_balance:
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = (
            "‚ùå *–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–ª–∞–Ω—Å–æ–º –Ω–∞ —Å—á–µ—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç.\n\n"
            "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞."
        ) if language_code == 'ru' else (
            "‚ùå *Temporary technical issue*\n\n"
            "Unfortunately, the service is currently unavailable due to provider account balance issues. "
            "Please try again later or choose another package.\n\n"
            "Our specialists are already working to resolve this issue."
        )
        
        builder = InlineKeyboardBuilder()
        if language_code == 'ru':
            builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_packages")
            builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        else:
            builder.button(text="‚Ü©Ô∏è Back to selection", callback_data="back_to_packages")
            builder.button(text="üè† Main menu", callback_data="main_menu")
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            error_message,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞
    try:
        balance_result = await esim_service.query_balance()
        if balance_result.get("success") and "balance" in balance_result:
            current_balance = balance_result.get("balance", 0)
            min_operational_balance = float(os.getenv("MIN_OPERATIONAL_BALANCE", 5.0))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞
            remaining_balance = current_balance - package.price
            
            if remaining_balance < min_operational_balance:
                # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –±—É–¥–µ—Ç –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                error_message = (
                    f"‚ùå *–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n\n"
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º. "
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                    f"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
                ) if language_code == 'ru' else (
                    f"‚ùå *Temporarily Unavailable*\n\n"
                    f"Unfortunately, payment for this package is currently unavailable due to technical reasons. "
                    f"Please select another package or try again later.\n\n"
                    f"We apologize for the inconvenience."
                )
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                logger = logging.getLogger(__name__)
                logger.warning(
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏. "
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}, –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞: ${package.price:.2f}, "
                    f"–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫: ${min_operational_balance:.2f}, –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: ${remaining_balance:.2f}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                admin_chat_id = os.getenv("ADMIN_CHAT_ID")
                if admin_chat_id:
                    try:
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Bot –∏–∑ aiogram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        from aiogram import Bot
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
                        bot_token = os.getenv("BOT_TOKEN")
                        if not bot_token:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                        else:
                            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
                            bot = Bot(token=bot_token)
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            admin_message = (
                                f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:\n\n"
                                f"üìä –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞: ${package.price:.2f}\n"
                                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}\n"
                                f"üíµ –ú–∏–Ω. —Ç—Ä–µ–±—É–µ–º—ã–π –æ—Å—Ç–∞—Ç–æ–∫: ${min_operational_balance:.2f}\n"
                                f"üìâ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: ${remaining_balance:.2f}\n\n"
                                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{callback.from_user.username or '–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'})\n"
                                f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}\n"
                                f"üåç –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç: {package.name} ({package.country.name if package.country else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞'})\n\n"
                                f"‚è± –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
                            )
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                            await bot.send_message(admin_chat_id, admin_message)
                            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (chat_id: {admin_chat_id})")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
                else:
                    logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ.")
                
                builder = InlineKeyboardBuilder()
                if language_code == 'ru':
                    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_packages")
                    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                else:
                    builder.button(text="‚Ü©Ô∏è Back to selection", callback_data="back_to_packages")
                    builder.button(text="üè† Main menu", callback_data="main_menu")
                
                builder.adjust(1)
                
                await callback.message.edit_text(
                    error_message,
                    reply_markup=builder.as_markup(),
                    parse_mode="Markdown"
                )
                await callback.answer()
                return
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    transaction_id = str(uuid.uuid4())

    new_order = Order(
        user_id=user.id,
        package_id=package_id,
        transaction_id=transaction_id,
        status=OrderStatus.AWAITING_PAYMENT.value,
        amount=package.price,
        created_at=datetime.utcnow()
    )

    session.add(new_order)
    await session.commit()

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
    await session.refresh(new_order)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_id=new_order.id)

    payment_method = callback.data.split(":")[1]

    # –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot.
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤.
    await state.set_state(PaymentState.select_method)

    message_text = (
        "üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã*" if language_code == 'ru' else
        "üí∞ *Choose a cryptocurrency to pay*"
    )

    builder = InlineKeyboardBuilder()
    for asset, label in [("TON", "üíé TON"), ("USDT", "üíµ USDT"), ("BTC", "‚Çø BTC")]:
        builder.button(text=label, callback_data=f"payment_asset:{asset}:{new_order.id}")
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" if language_code == 'ru' else "‚ùå Cancel",
        callback_data="cancel_payment"
    )
    builder.adjust(1)

    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ (TON/crypto –¥–µ—Ç–∞–ª–∏ –Ω–∏–∂–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã)
    return

# -----------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–∞ (TON / USDT / BTC) –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data.startswith("payment_asset:"))
async def payment_asset_selected(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    _, asset, order_id = callback.data.split(":")
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    order = await session.get(Order, int(order_id))
    if order is None:
        await callback.answer("Order not found", show_alert=True)
        return
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ —á–µ—Ä–µ–∑ CryptoBot
    invoice = await create_crypto_invoice(order.id, order.amount, asset)
    if not invoice:
        await callback.answer("Failed to create invoice", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
    amount_display = invoice["amount"]
    asset_emoji = "üí∞"  # –≠–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if asset == "BTC":
        asset_emoji = "‚Çø"  # –≠–º–æ–¥–∑–∏ –¥–ª—è Bitcoin
        if invoice["amount"] < 0.0001:
            amount_display = f"{invoice['amount']:.8f}"
        else:
            amount_display = f"{invoice['amount']:.6f}"
    elif asset == "USDT":
        asset_emoji = "üíµ"  # –≠–º–æ–¥–∑–∏ –¥–ª—è USDT
        amount_display = f"{invoice['amount']:.2f}"
    elif asset == "TON":
        asset_emoji = "üíé"  # –≠–º–æ–¥–∑–∏ –¥–ª—è TON
        amount_display = f"{invoice['amount']:.4f}"
    
    text = f"{asset_emoji} –û–ø–ª–∞—Ç–∏—Ç–µ {amount_display} {asset} –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:"
    kb = InlineKeyboardBuilder()
    kb.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=invoice["payment_url"])
    kb.button(
        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚Ü©Ô∏è Back",
        callback_data=f"back_to_crypto_selection:{order_id}"
    )
    kb.adjust(1)

    await callback.message.edit_text(text, reply_markup=kb.as_markup())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º invoice_id –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    order.invoice_id = str(invoice["invoice_id"])
    order.payment_method = f"crypto_{asset.lower()}"
    await session.commit()
    await state.set_state(PaymentState.awaiting_payment)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@router.callback_query(lambda c: c.data.startswith("back_to_crypto_selection:"))
async def back_to_crypto_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    order_id = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order = await session.get(Order, int(order_id))
    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")
    
    if order is None:
        await callback.answer("Order not found", show_alert=True)
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    await state.set_state(PaymentState.select_method)
    
    message_text = (
        "üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã*" if language_code == 'ru' else
        "üí∞ *Choose a cryptocurrency to pay*"
    )
    
    builder = InlineKeyboardBuilder()
    for asset, label in [("TON", "üíé TON"), ("USDT", "üíµ USDT"), ("BTC", "‚Çø BTC")]:
        builder.button(text=label, callback_data=f"payment_asset:{asset}:{order_id}")
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" if language_code == 'ru' else "‚ùå Cancel",
        callback_data="cancel_payment"
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("check_payment:"))
async def check_payment_status(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    import logging
    logger = logging.getLogger(__name__)
    order_id = int(callback.data.split(":")[1])
    logger.info(f"Checking payment status for order_id: {order_id}")

    user_data = await state.get_data()
    language_code = user_data.get("language_code", "ru")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    message_text = (
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...\n\n"
        "–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    ) if language_code == 'ru' else (
        "‚è≥ Checking payment status...\n\n"
        "This process may take some time. Please wait."
    )

    await callback.message.edit_text(
        message_text,
        reply_markup=None
    )

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
    order = await session.get(Order, order_id)
    if not order:
        logger.error(f"Order not found: {order_id}")
        message_text = (
            "\u274c –û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
        ) if language_code == 'ru' else (
            "\u274c Error: Order not found. Please start the process again."
        )

        builder = InlineKeyboardBuilder()
        builder.button(
            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" if language_code == 'ru' else "Return to menu",
            callback_data="main_menu"
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup()
        )
        return

    if not order.invoice_id:
        logger.error(f"Order {order_id} has no invoice_id")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard(language_code)
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ CryptoBot
    logger.info(f"Checking payment with invoice_id: {order.invoice_id}")
    payment_info = await check_ton_payment(order.invoice_id)

    if payment_info and payment_info.get("paid"):
        # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
        logger.info(f"Payment successful for order {order_id}, updating status to PAID")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
        order.status = OrderStatus.PAID.value
        order.paid_at = datetime.utcnow()
        order.payment_details = str(payment_info)
        await session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
        package = await get_package_by_id(session, order.package_id)
        if not package:
            logger.error(f"Package not found for order {order_id}")
            message_text = (
                "‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ eSIM. "
                "–ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            ) if language_code == 'ru' else (
                "‚úÖ *Payment successfully received!*\n\n"
                "Unfortunately, there was an issue with activating your eSIM. "
                "Our support team will contact you soon."
            )

            builder = InlineKeyboardBuilder()
            builder.button(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main menu",
                callback_data="main_menu"
            )

            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
            await state.set_state(MainMenu.menu)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        processing_message = (
            "‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n"
            "–ó–∞–∫–∞–∑—ã–≤–∞–µ–º eSIM —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
        ) if language_code == 'ru' else (
            "‚úÖ *Payment successfully received!*\n\n"
            "Ordering eSIM from provider. This may take some time..."
        )

        await callback.message.edit_text(
            processing_message,
            parse_mode="Markdown"
        )

        # –ó–∞–∫–∞–∑—ã–≤–∞–µ–º eSIM —á–µ—Ä–µ–∑ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        logger.info(f"Ordering eSIM for order {order_id}, package code: {package.package_code}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ PROCESSING
        order.status = OrderStatus.PROCESSING.value
        await session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è email (–µ—Å–ª–∏ –µ—Å—Ç—å)
        user = await get_user_by_telegram_id(session, callback.from_user.id)
        email = user.email if user and user.email else "customer@example.com"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º email –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –°–æ–∑–¥–∞–µ–º eSIM
        esim_result = await esim_service.create_esim(order_id, package.package_code, email)

        if esim_result.get('success'):
            # eSIM —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
            logger.info(f"eSIM successfully created for order {order_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
            order.status = OrderStatus.COMPLETED.value

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if esim_result.get('order_no'):
                order.order_no = esim_result.get('order_no')

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ ESim
            from database.models import ESim

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å ESim –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
            esim_query = select(ESim).where(ESim.order_id == order_id)
            existing_esim_result = await session.execute(esim_query)
            existing_esim = existing_esim_result.scalars().first()

            if existing_esim:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                existing_esim.iccid = esim_result.get('esim_iccid', '')
                existing_esim.activation_code = esim_result.get('activation_code', '')
                existing_esim.qr_code_url = esim_result.get('qr_code_url', '')
                existing_esim.esim_status = esim_result.get('esim_status', 'ACTIVATED')
                existing_esim.esim_tran_no = esim_result.get('order_no', '')
                existing_esim.imsi = esim_result.get('imsi', '')
                existing_esim.msisdn = esim_result.get('msisdn', '')
                existing_esim.active_type = esim_result.get('active_type', 0)
                existing_esim.expired_time = None  # –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ datetime
                existing_esim.total_volume = esim_result.get('total_volume', 0)
                existing_esim.total_duration = esim_result.get('total_duration', 0)
                existing_esim.duration_unit = esim_result.get('duration_unit', 'DAY')
                existing_esim.order_usage = esim_result.get('order_usage', 0)
                existing_esim.pin = esim_result.get('pin', '')
                existing_esim.puk = esim_result.get('puk', '')
                existing_esim.apn = esim_result.get('apn', '')
                existing_esim.raw_data = esim_result.get('api_response', {})
                existing_esim.updated_at = datetime.utcnow()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ESim
                new_esim = ESim(
                    order_id=order_id,
                    esim_tran_no=esim_result.get('order_no', ''),
                    iccid=esim_result.get('esim_iccid', ''),
                    imsi=esim_result.get('imsi', ''),
                    msisdn=esim_result.get('msisdn', ''),
                    activation_code=esim_result.get('activation_code', ''),
                    qr_code_url=esim_result.get('qr_code_url', ''),
                    esim_status=esim_result.get('esim_status', 'ACTIVATED'),
                    active_type=esim_result.get('active_type', 0),
                    # expired_time —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ datetime
                    total_volume=esim_result.get('total_volume', 0),
                    total_duration=esim_result.get('total_duration', 0),
                    duration_unit=esim_result.get('duration_unit', 'DAY'),
                    order_usage=esim_result.get('order_usage', 0),
                    pin=esim_result.get('pin', ''),
                    puk=esim_result.get('puk', ''),
                    apn=esim_result.get('apn', ''),
                    raw_data=esim_result.get('api_response', {}),
                    created_at=datetime.utcnow()
                )
                session.add(new_esim)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            await session.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ eSIM
            message_text = (
                "üéâ *–í–∞—à–∞ eSIM –≥–æ—Ç–æ–≤–∞!*\n\n"
                f"*ICCID:* `{esim_result.get('esim_iccid', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}`\n"
            ) if language_code == 'ru' else (
                "üéâ *Your eSIM is ready!*\n\n"
                f"*ICCID:* `{esim_result.get('esim_iccid', 'Not available')}`\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
            message_text += (
                f"*–°—Ç—Ä–∞–Ω–∞:* {package.country.name}\n"
                f"*–ü–∞–∫–µ—Ç:* {package.data_amount} –ì–ë –Ω–∞ {package.duration} –¥–Ω–µ–π\n\n"
            ) if language_code == 'ru' else (
                f"*Country:* {package.country.name}\n"
                f"*Package:* {package.data_amount} GB for {package.duration} days\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º QR-–∫–æ–¥, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if esim_result.get('qr_code_url'):
                message_text += (
                    "QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
                ) if language_code == 'ru' else (
                    "QR code for activation has been sent in a separate message.\n\n"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if esim_result.get('manual_activation_code'):
                message_text += (
                    f"*–ö–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:* `{esim_result.get('manual_activation_code')}`\n\n"
                ) if language_code == 'ru' else (
                    f"*Manual activation code:* `{esim_result.get('manual_activation_code')}`\n\n"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º APN, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if esim_result.get('apn'):
                message_text += (
                    f"*APN:* `{esim_result.get('apn')}`\n\n"
                ) if language_code == 'ru' else (
                    f"*APN:* `{esim_result.get('apn')}`\n\n"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            message_text += (
                "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å' –∏–ª–∏ 'SIM-–∫–∞—Ä—Ç—ã'\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å eSIM' –∏–ª–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω'\n"
                "4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é\n"
                "5. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
            ) if language_code == 'ru' else (
                "*Activation instructions:*\n"
                "1. Open your phone settings\n"
                "2. Go to 'Cellular' or 'SIM cards' section\n"
                "3. Select 'Add eSIM' or 'Add cellular plan'\n"
                "4. Scan the QR code or enter the activation code manually\n"
                "5. Follow the on-screen instructions\n\n"
                "If you have any issues with activation, please contact our support team."
            )
        else:
            # –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º eSIM
            error_message = esim_result.get('error', 'Unknown error')
            logger.error(f"Failed to create eSIM for order {order_id}: {error_message}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
            order.status = OrderStatus.FAILED.value
            await session.commit()

            message_text = (
                "‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ eSIM. "
                f"–û—à–∏–±–∫–∞: {error_message}\n\n"
                "–ù–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            ) if language_code == 'ru' else (
                "‚úÖ *Payment successfully received!*\n\n"
                "Unfortunately, there was an issue with activating your eSIM. "
                f"Error: {error_message}\n\n"
                "Our support team will contact you soon."
            )

        builder = InlineKeyboardBuilder()
        builder.button(
            text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" if language_code == 'ru' else "üë§ My Account",
            callback_data="account"
        )
        builder.button(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main menu",
            callback_data="main_menu"
        )
        builder.adjust(1)

        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å QR-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if esim_result.get('success') and esim_result.get('qr_code_url'):
            try:
                await callback.message.answer_photo(
                    photo=esim_result.get('qr_code_url'),
                    caption=(
                        "QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–π eSIM. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
                    ) if language_code == 'ru' else (
                        "QR code for activating your eSIM. Scan it in your phone settings."
                    )
                )
            except Exception as e:
                logger.error(f"Error sending QR code: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ QR-–∫–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await callback.message.answer(
                    (
                        "–°—Å—ã–ª–∫–∞ –Ω–∞ QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–π eSIM:\n"
                        f"{esim_result.get('qr_code_url')}"
                    ) if language_code == 'ru' else (
                        "Link to QR code for activating your eSIM:\n"
                        f"{esim_result.get('qr_code_url')}"
                    )
                )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await state.set_state(MainMenu.menu)
    else:
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        message_text = (
            "‚ùó *–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n\n"
            "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        ) if language_code == 'ru' else (
            "‚ùó *Payment not found*\n\n"
            "We couldn't find your payment. It may take more time to process. "
            "Try checking the status later or contact support."
        )

        builder = InlineKeyboardBuilder()
        builder.button(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞" if language_code == 'ru' else "üîÑ Check again",
            callback_data=f"check_payment:{order_id}"
        )
        builder.button(
            text="‚ùì –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π" if language_code == 'ru' else "‚ùì Contact support",
            callback_data="support"
        )
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" if language_code == 'ru' else "‚ùå Cancel",
            callback_data="cancel_payment"
        )
        builder.adjust(1)

        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    order_id = user_data.get("order_id")
    language_code = user_data.get("language_code", "ru")
    country_code = user_data.get("country_code")
    selected_duration = user_data.get("selected_duration")
    package_id = user_data.get("package_id")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if order_id:
        order = await session.get(Order, order_id)
        if order:
            order.status = OrderStatus.CANCELED.value
            await session.commit()

    message_text = (
        "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    ) if language_code == 'ru' else (
        "‚ùå Payment canceled.\n\n"
        "You can choose another package or return to the main menu."
    )

    builder = InlineKeyboardBuilder()
    builder.button(
        text="üåé –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç" if language_code == 'ru' else "üåé Choose another package",
        callback_data="back_to_packages_payment"
    )
    builder.button(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main menu",
        callback_data="main_menu"
    )
    builder.adjust(1)

    # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã
    await state.update_data({
        "country_code": country_code,
        "selected_duration": selected_duration,
        "package_id": package_id,
        "language_code": language_code
    })

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_packages —Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    await state.set_state(BuyESim.select_package)

    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup()
    )