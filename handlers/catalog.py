from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import math

from sqlalchemy.ext.asyncio import AsyncSession

from database.queries import get_all_countries, get_packages_by_country, get_country_by_code, get_user_by_telegram_id
from utils.states import BuyESim, MainMenu, CallbackData

router = Router()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
COUNTRIES_PER_PAGE = 30  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ * 10 —Ä—è–¥–æ–≤ = 30 —Å—Ç—Ä–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


def get_countries_keyboard(countries: list, page: int = 0, language_code: str = 'ru') -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    builder = InlineKeyboardBuilder()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = math.ceil(len(countries) / COUNTRIES_PER_PAGE)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * COUNTRIES_PER_PAGE
    end_idx = min(start_idx + COUNTRIES_PER_PAGE, len(countries))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for country in countries[start_idx:end_idx]:
        flag = country.flag_emoji or 'üåç'
        builder.button(
            text=f"{flag} {country.name}",
            callback_data=f"{CallbackData.COUNTRY.value}:{country.code}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    if total_pages > 1:
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if page > 0:
            prev_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚¨ÖÔ∏è Back"
            builder.button(
                text=prev_text,
                callback_data=f"{CallbackData.PAGE.value}:{page-1}"
            )
        
        # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_text = f"{page+1}/{total_pages}"
        builder.button(
            text=page_text,
            callback_data="page_info"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥
        if page < total_pages - 1:
            next_text = "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è" if language_code == 'ru' else "Next ‚û°Ô∏è"
            builder.button(
                text=next_text,
                callback_data=f"{CallbackData.PAGE.value}:{page+1}"
            )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if language_code == 'ru' else "‚óÄÔ∏è Back to menu"
    builder.button(text=back_text, callback_data="main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
    # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    country_buttons_count = min(end_idx - start_idx, COUNTRIES_PER_PAGE)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    nav_buttons_count = 0
    if total_pages > 1:
        if page > 0:  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            nav_buttons_count += 1
        nav_buttons_count += 1  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < total_pages - 1:  # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            nav_buttons_count += 1
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    # –°—Ç—Ä–∞–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ 3 –≤ —Ä—è–¥
    rows = [3] * (country_buttons_count // 3)
    if country_buttons_count % 3 > 0:
        rows.append(country_buttons_count % 3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if nav_buttons_count > 0:
        rows.append(nav_buttons_count)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    rows.append(1)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
    builder.adjust(*rows)
    
    return builder


def get_packages_keyboard(packages: list, country_code: str, language_code: str = 'ru') -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    builder = InlineKeyboardBuilder()
    
    for package in packages:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
        if language_code == 'ru':
            if package.data_amount.is_integer():
                data_text = f"{int(package.data_amount)} –ì–ë"
            else:
                data_text = f"{package.data_amount} –ì–ë"
                
            duration_text = f"{package.duration} –¥–Ω–µ–π"
            price_text = f"{package.price:.2f} USD"
            button_text = f"{data_text}, {duration_text} - {price_text}"
        else:  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if package.data_amount.is_integer():
                data_text = f"{int(package.data_amount)} GB"
            else:
                data_text = f"{package.data_amount} GB"
                
            duration_text = f"{package.duration} days"
            price_text = f"${package.price:.2f}"
            button_text = f"{data_text}, {duration_text} - {price_text}"
        
        builder.button(
            text=button_text,
            callback_data=f"{CallbackData.PACKAGE.value}:{package.id}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
    back_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º" if language_code == 'ru' else "‚óÄÔ∏è Back to countries"
    builder.button(text=back_text, callback_data=f"{CallbackData.BACK.value}:countries")
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main menu"
    builder.button(text=main_menu_text, callback_data="main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: —Ç–∞—Ä–∏—Ñ—ã –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É, –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    builder.adjust(1, repeat=True)
    
    return builder


@router.callback_query(F.data == "buy_esim")
async def process_buy_esim_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å eSIM'"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    countries = await get_all_countries(session)
    
    if not countries:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if language_code == 'ru':
            await callback.message.edit_text(
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ eSIM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                "There are no available countries for eSIM purchase at the moment. Please try again later.",
                reply_markup=None
            )
        await state.set_state(MainMenu.menu)
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
        await state.set_state(BuyESim.select_country)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = get_countries_keyboard(countries, page=0, language_code=language_code)
        
        if language_code == 'ru':
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ eSIM:",
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.edit_text(
                "Select a country for your eSIM:",
                reply_markup=keyboard.as_markup()
            )
    
    await callback.answer()


@router.callback_query(F.data.startswith(f"{CallbackData.PAGE.value}:"))
async def process_page_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞–Ω—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split(':')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    countries = await get_all_countries(session)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = get_countries_keyboard(countries, page=page, language_code=language_code)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if language_code == 'ru':
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ eSIM:",
            reply_markup=keyboard.as_markup()
        )
    else:
        await callback.message.edit_text(
            "Select a country for your eSIM:",
            reply_markup=keyboard.as_markup()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith(f"{CallbackData.COUNTRY.value}:"))
async def process_country_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ callback_data
    country_code = callback.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
    country = await get_country_by_code(session, country_code)
    
    if not country:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
        await process_buy_esim_callback(callback, state, session)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(selected_country_code=country_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    packages = await get_packages_by_country(session, country.id)
    
    if not packages:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        if language_code == 'ru':
            await callback.message.edit_text(
                f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è {country.name}. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                f"There are no available data plans for {country.name} at the moment. "
                f"Please select another country or try again later.",
                reply_markup=None
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
        await process_buy_esim_callback(callback, state, session)
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
        await state.set_state(BuyESim.select_package)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏
        keyboard = get_packages_keyboard(packages, country_code, language_code=language_code)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö
        flag = country.flag_emoji or 'üåç'
        
        if language_code == 'ru':
            header = f"{flag} **{country.name}** - –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
            message = (
                f"{header}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏ –≤ {country.name}. "
                f"–í—Å–µ –ø–∞–∫–µ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4G/LTE –∏ 5G (–≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ)."
            )
        else:
            header = f"{flag} **{country.name}** - Select a data plan:"
            message = (
                f"{header}\n\n"
                f"Choose a suitable data plan for your trip to {country.name}. "
                f"All packages include high-speed internet with 4G/LTE and 5G support (where available)."
            )
        
        await callback.message.edit_text(
            message,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith(f"{CallbackData.PACKAGE.value}:"))
async def process_package_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞–∫–µ—Ç–∞ –∏–∑ callback_data
    package_id = int(callback.data.split(':')[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(selected_package_id=package_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ–∫—É–ø–∫–∏ –≤ payment.py
    await state.set_state(BuyESim.confirm_purchase)
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ–∫—É–ø–∫–∏
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ handlers/payment.py, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    if language_code == 'ru':
        await callback.message.edit_text(
            "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ–∫—É–ø–∫–∏ –∏ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã...",
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            "Proceeding to purchase confirmation and payment method selection...",
            reply_markup=None
        )
    
    await callback.answer()


@router.callback_query(F.data == f"{CallbackData.BACK.value}:countries")
async def process_back_to_countries(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã"""
    await process_buy_esim_callback(callback, state, session)


@router.callback_query(F.data == "page_info")
async def process_page_info(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"""
    await callback.answer()