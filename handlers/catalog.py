from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import math

from sqlalchemy.ext.asyncio import AsyncSession

from database.queries import get_all_countries, get_packages_by_country, get_country_by_code, get_user_by_telegram_id, get_package_by_id
from utils.states import BuyESim, MainMenu, CallbackData

router = Router()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
COUNTRIES_PER_PAGE = 30  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ * 10 —Ä—è–¥–æ–≤ = 30 —Å—Ç—Ä–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

POPULAR_COUNTRY_CODES = ["TH", "VN", "ID", "EG", "ES", "GR", "CY", "TR", "MY", "PH", 
                        "LK", "MX", "BR", "US", "CR", "DO", "SC", "MU", "ZA", "IT", 
                        "HR", "PT", "AE", "OM", "TN", "MA", "JM", "AU", "IN", "FR"] 


def get_countries_keyboard(countries: list, page: int = 0, language_code: str = 'ru') -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    builder = InlineKeyboardBuilder()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = math.ceil(len(countries) / COUNTRIES_PER_PAGE)

    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    def get_country_name(country):
        return country.name_ru if language_code == 'ru' and hasattr(country, 'name_ru') and country.name_ru else country.name

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    popular = [c for c in countries if c.code in POPULAR_COUNTRY_CODES]
    others = [c for c in countries if c.code not in POPULAR_COUNTRY_CODES]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ –≥—Ä—É–ø–ø—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    popular.sort(key=lambda c: get_country_name(c))
    others.sort(key=lambda c: get_country_name(c))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    countries = popular + others
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * COUNTRIES_PER_PAGE
    end_idx = min(start_idx + COUNTRIES_PER_PAGE, len(countries))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for country in countries[start_idx:end_idx]:
        flag = country.flag_emoji or 'üåç'
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        country_name = get_country_name(country)
        builder.button(
            text=f"{flag} {country_name}",
            callback_data=f"{CallbackData.COUNTRY.value}:{country.code}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    if total_pages > 1:
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if page > 0:
            prev_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if language_code == 'ru' else "‚¨ÖÔ∏è Back"
            builder.button(
                text=prev_text,
                callback_data=f"{CallbackData.PAGE.value}:{page-1}"
            )
        
        # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_text = f"{page+1}/{total_pages}"
        builder.button(
            text=page_text,
            callback_data="page_info"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥
        if page < total_pages - 1:
            next_text = "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è" if language_code == 'ru' else "Next ‚û°Ô∏è"
            builder.button(
                text=next_text,
                callback_data=f"{CallbackData.PAGE.value}:{page+1}"
            )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if language_code == 'ru' else "‚óÄÔ∏è Back to menu"
    builder.button(text=back_text, callback_data="main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫
    # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    country_buttons_count = min(end_idx - start_idx, COUNTRIES_PER_PAGE)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    nav_buttons_count = 0
    if total_pages > 1:
        if page > 0:  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            nav_buttons_count += 1
        nav_buttons_count += 1  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < total_pages - 1:  # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            nav_buttons_count += 1
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    # –°—Ç—Ä–∞–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ 3 –≤ —Ä—è–¥
    rows = [3] * (country_buttons_count // 3)
    if country_buttons_count % 3 > 0:
        rows.append(country_buttons_count % 3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if nav_buttons_count > 0:
        rows.append(nav_buttons_count)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    rows.append(1)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
    builder.adjust(*rows)
    
    return builder


def get_durations_keyboard(packages: list, country_code: str, language_code: str = 'ru') -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    durations = set()
    for package in packages:
        durations.add(package.duration)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    durations = sorted(durations)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for duration in durations:
        if language_code == 'ru':
            button_text = f"üìÖ {duration} –¥–Ω–µ–π"
        else:
            button_text = f"üìÖ {duration} days"
        
        builder.button(
            text=button_text,
            callback_data=f"{CallbackData.DURATION.value}:{country_code}:{duration}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
    back_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º" if language_code == 'ru' else "‚óÄÔ∏è Back to countries"
    builder.button(text=back_text, callback_data=f"{CallbackData.BACK.value}:countries")
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main menu"
    builder.button(text=main_menu_text, callback_data="main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥, –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    builder.adjust(2, 2)
    
    return builder


def get_packages_by_duration_keyboard(packages: list, country_code: str, duration: int, language_code: str = 'ru') -> InlineKeyboardBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
    builder = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    filtered_packages = [p for p in packages if p.duration == duration]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –æ–±—ä–µ–º—É –¥–∞–Ω–Ω—ã—Ö
    sorted_packages = sorted(filtered_packages, key=lambda p: p.data_amount)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    for package in sorted_packages:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
        if language_code == 'ru':
            if package.data_amount.is_integer():
                data_text = f"{int(package.data_amount)} –ì–ë"
            else:
                data_text = f"{package.data_amount} –ì–ë"
                
            price_text = f"{package.price:.2f} USD"
            button_text = f"{data_text} - {price_text}"
        else:  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if package.data_amount.is_integer():
                data_text = f"{int(package.data_amount)} GB"
            else:
                data_text = f"{package.data_amount} GB"
                
            price_text = f"${package.price:.2f}"
            button_text = f"{data_text} - {price_text}"
        
        builder.button(
            text=button_text,
            callback_data=f"{CallbackData.PACKAGE.value}:{package.id}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    back_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" if language_code == 'ru' else "‚óÄÔ∏è Back to duration selection"
    builder.button(text=back_text, callback_data=f"{CallbackData.BACK.value}:durations:{country_code}")
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language_code == 'ru' else "üè† Main menu"
    builder.button(text=main_menu_text, callback_data="main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: –ø–∞–∫–µ—Ç—ã –ø–æ –¥–≤–µ –≤ —Ä—è–¥, –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    builder.adjust(2, 2)
    
    return builder


@router.callback_query(F.data == "buy_esim")
async def process_buy_esim_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å eSIM'"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    countries = await get_all_countries(session)
    
    if not countries:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if language_code == 'ru':
            await callback.message.edit_text(
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ eSIM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                "There are no available countries for eSIM purchase at the moment. Please try again later.",
                reply_markup=None
            )
        await state.set_state(MainMenu.menu)
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
        await state.set_state(BuyESim.select_country)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = get_countries_keyboard(countries, page=0, language_code=language_code)
        
        if language_code == 'ru':
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ eSIM:",
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.edit_text(
                "Select a country for your eSIM:",
                reply_markup=keyboard.as_markup()
            )
    
    await callback.answer()


@router.callback_query(F.data.startswith(f"{CallbackData.PAGE.value}:"))
async def process_page_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞–Ω—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split(':')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    countries = await get_all_countries(session)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = get_countries_keyboard(countries, page=page, language_code=language_code)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if language_code == 'ru':
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ eSIM:",
            reply_markup=keyboard.as_markup()
        )
    else:
        await callback.message.edit_text(
            "Select a country for your eSIM:",
            reply_markup=keyboard.as_markup()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith(f"{CallbackData.COUNTRY.value}:"))
async def process_country_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ callback_data
    country_code = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
    country = await get_country_by_code(session, country_code)
    
    if not country:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if language_code == 'ru':
            await callback.message.edit_text(
                "–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É.",
                reply_markup=InlineKeyboardBuilder().button(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    callback_data="main_menu"
                ).as_markup()
            )
        else:
            await callback.message.edit_text(
                "Selected country not found. Please choose another country.",
                reply_markup=InlineKeyboardBuilder().button(
                    text="‚óÄÔ∏è Back to menu",
                    callback_data="main_menu"
                ).as_markup()
            )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(selected_country_code=country_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    packages = await get_packages_by_country(session, country.id)
    
    if not packages:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        flag = country.flag_emoji or 'üåç'
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        country_name = country.name_ru if language_code == 'ru' and hasattr(country, 'name_ru') and country.name_ru else country.name
        
        if language_code == 'ru':
            no_packages_message = (
                f"{flag} **{country_name}**\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è {country_name}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        else:
            no_packages_message = (
                f"{flag} **{country_name}**\n\n"
                f"Unfortunately, there are no available packages for {country_name} at the moment.\n"
                f"Please choose another country or try again later."
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
        keyboard = InlineKeyboardBuilder()
        back_text = "‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É" if language_code == 'ru' else "‚óÄÔ∏è Choose another country"
        keyboard.button(text=back_text, callback_data="buy_esim")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menu_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if language_code == 'ru' else "‚óÄÔ∏è Back to menu"
        keyboard.button(text=menu_text, callback_data="main_menu")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ - –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            no_packages_message,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞
    await state.set_state(BuyESim.select_duration)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ –ø–∞–∫–µ—Ç–æ–≤
    keyboard = get_durations_keyboard(packages, country_code, language_code=language_code)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–µ
    flag = country.flag_emoji or 'üåç'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    country_name = country.name_ru if language_code == 'ru' and hasattr(country, 'name_ru') and country.name_ru else country.name
    
    if language_code == 'ru':
        header = f"{flag} **{country_name}** - –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:"
        message = (
            f"{header}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–∞–∫–µ—Ç–∞ –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏ –≤ {country_name}. "
            f"–í—Å–µ –ø–∞–∫–µ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4G/LTE –∏ 5G (–≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ)."
        )
    else:
        header = f"{flag} **{country_name}** - Select package duration:"
        message = (
            f"{header}\n\n"
            f"Choose the duration of your internet package for your trip to {country_name}. "
            f"All packages include high-speed internet with 4G/LTE and 5G support (where available)."
        )
    
    await callback.message.edit_text(
        message,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith(f"{CallbackData.DURATION.value}:"))
async def process_duration_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ callback_data
    parts = callback.data.split(':')
    country_code = parts[1]
    duration = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
    country = await get_country_by_code(session, country_code)
    
    if not country:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
        await process_buy_esim_callback(callback, state, session)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(selected_duration=duration)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    packages = await get_packages_by_country(session, country.id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    filtered_packages = [p for p in packages if p.duration == duration]
    
    if not filtered_packages:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if language_code == 'ru':
            await callback.message.edit_text(
                f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –Ω–∞ {duration} –¥–Ω–µ–π –¥–ª—è {country.name}. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É.",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                f"There are no available data plans for {duration} days in {country.name} at the moment. "
                f"Please select another duration or country.",
                reply_markup=None
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await process_country_selection(callback, state, session)
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
        await state.set_state(BuyESim.select_package)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        keyboard = get_packages_by_duration_keyboard(packages, country_code, duration, language_code=language_code)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö
        flag = country.flag_emoji or 'üåç'
        
        if language_code == 'ru':
            header = f"{flag} **{country.name}** - –ü–∞–∫–µ—Ç—ã –Ω–∞ {duration} –¥–Ω–µ–π:"
            message = (
                f"{header}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –Ω–∞ {duration} –¥–Ω–µ–π –≤ {country.name}. "
                f"–í—Å–µ –ø–∞–∫–µ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4G/LTE –∏ 5G (–≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ)."
            )
        else:
            header = f"{flag} **{country.name}** - {duration} days packages:"
            message = (
                f"{header}\n\n"
                f"Choose the amount of internet data for your {duration}-day package in {country.name}. "
                f"All packages include high-speed internet with 4G/LTE and 5G support (where available)."
            )
        
        await callback.message.edit_text(
            message,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith(f"{CallbackData.PACKAGE.value}:"))
async def process_package_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞–∫–µ—Ç–∞ –∏–∑ callback_data
    package_id = int(callback.data.split(':')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
    package = await get_package_by_id(session, package_id)
    
    if not package:
        await callback.message.edit_text(
            "–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç." if language_code == 'ru' else 
            "Package not found. Please select another package.",
            reply_markup=get_countries_keyboard(await get_all_countries(session), 0, language_code)
        )
        await state.set_state(BuyESim.select_country)
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞—Ä–∞–Ω–µ–µ
    country_name = package.country.name if package.country else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞" if language_code == 'ru' else "Unknown country"
    package_name = package.name
    data_amount = package.data_amount
    duration = package.duration
    price = package.price
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(package_id=package_id, language_code=language_code)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await state.set_state(BuyESim.select_payment)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–∞–∫–µ—Ç–µ
    message_text = (
        f"üì¶ *–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç:*\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name}\n"
        f"üì± –ü–∞–∫–µ—Ç: {package_name}\n"
        f"üìä –î–∞–Ω–Ω—ã–µ: {data_amount} –ì–ë\n"
        f"‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration} –¥–Ω–µ–π\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price:.2f}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    ) if language_code == 'ru' else (
        f"üì¶ *Selected package:*\n"
        f"üåç Country: {country_name}\n"
        f"üì± Package: {package_name}\n"
        f"üìä Data: {data_amount} GB\n"
        f"‚è± Duration: {duration} days\n"
        f"üí∞ Price: ${price:.2f}\n\n"
        f"Choose payment method:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    builder = InlineKeyboardBuilder()
    
    if language_code == 'ru':
        builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (CryptoBot)", callback_data="payment:ton")
        builder.button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞", callback_data="back_to_packages")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    else:
        builder.button(text="üí≥ Pay with Crypto (CryptoBot)", callback_data="payment:ton")
        builder.button(text="‚Ü©Ô∏è Back to package selection", callback_data="back_to_packages")
        builder.button(text="üè† Main menu", callback_data="main_menu")
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer()


@router.callback_query(F.data == f"{CallbackData.BACK.value}:countries")
async def process_back_to_countries(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã"""
    await process_buy_esim_callback(callback, state, session)


# –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
import logging
logger = logging.getLogger(__name__)

@router.callback_query(F.data.in_({"back_to_packages", "back_to_packages_payment"}))
async def process_back_to_packages(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞"""
    logger.info("\n\n==== –í—ã–∑–æ–≤ process_back_to_packages =====")
    logger.info(f"callback.data: {callback.data}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    logger.info(f"user_data: {user_data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–∞ –¥–ª—è –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    country_code = user_data.get("country_code")
    if not country_code:  # –ï—Å–ª–∏ country_code –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º selected_country_code
        country_code = user_data.get("selected_country_code")
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ selected_country_code, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ country_code –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if country_code:
            await state.update_data({"country_code": country_code})
            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ selected_country_code: {country_code}")
    
    language_code = user_data.get("language_code", "ru")
    selected_duration = user_data.get("selected_duration")  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    
    logger.info(f"country_code: {country_code}, language_code: {language_code}, selected_duration: {selected_duration} (—Ç–∏–ø: {type(selected_duration)})")
    
    if not country_code:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Ç—Ä–∞–Ω
        await process_buy_esim_callback(callback, state, session)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏ –µ–µ –ø–∞–∫–µ—Ç—ã
    country = await get_country_by_code(session, country_code)
    packages = await get_packages_by_country(session, country.id) if country else []
    
    if not country or not packages:
        await callback.message.edit_text(
            "–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–ª—è –Ω–µ–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤." if language_code == 'ru' else
            "Country not found or no packages available for it.",
            reply_markup=get_countries_keyboard(await get_all_countries(session), 0, language_code)
        )
        await state.set_state(BuyESim.select_country)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if selected_duration:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º selected_duration –≤ int, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
        try:
            selected_duration = int(selected_duration)
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            filtered_packages = [p for p in packages if p.duration == selected_duration]
        except (ValueError, TypeError):
            filtered_packages = []
        
        logger.info(f"filtered_packages: {filtered_packages}")
        if filtered_packages:
            logger.info("filtered_packages –Ω–µ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
            await state.set_state(BuyESim.select_package)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            keyboard = get_packages_by_duration_keyboard(packages, country_code, selected_duration, language_code)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö
            flag = country.flag_emoji or 'üåç'
            
            if language_code == 'ru':
                header = f"{flag} **{country.name}** - –ü–∞–∫–µ—Ç—ã –Ω–∞ {selected_duration} –¥–Ω–µ–π:"
                message = (
                    f"{header}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –Ω–∞ {selected_duration} –¥–Ω–µ–π –≤ {country.name}. "
                    f"–í—Å–µ –ø–∞–∫–µ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4G/LTE –∏ 5G (–≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ)."
                )
            else:
                header = f"{flag} **{country.name}** - {selected_duration} days packages:"
                message = (
                    f"{header}\n\n"
                    f"Choose the amount of internet data for your {selected_duration}-day package in {country.name}. "
                    f"All packages include high-speed internet with 4G/LTE and 5G support (where available)."
                )
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É: –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å as_markup() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è InlineKeyboardMarkup
            logger.info("Converting keyboard to markup with as_markup()")
            await callback.message.edit_text(
                message,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –Ω–µ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    logger.info(f"selected_duration –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ filtered_packages –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    # –î–æ—Å—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–æ–≤
    durations = set(package.duration for package in packages)
    durations = sorted(durations)
    logger.info(f"durations: {durations}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
    keyboard = get_durations_keyboard(packages, country_code, language_code)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üåç *–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞: {country.name}*\n\n" 
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:"
    ) if language_code == 'ru' else (
        f"üåç *Selected country: {country.name}*\n\n"
        f"Choose package duration:"
    )
    
    logger.info(f"Showing duration selection with message: {message_text[:30]}...")
    
    # –í–∞–∂–Ω–æ: –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(BuyESim.select_duration)
    logger.info("State set to BuyESim.select_duration")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–º–æ—â—å—é as_markup() —Ç–∞–∫–∂–µ –∏ –¥–ª—è —ç—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    logger.info("Converting duration keyboard to markup with as_markup()")
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    logger.info("Message sent with durations keyboard")


@router.callback_query(F.data.startswith(f"{CallbackData.BACK.value}:durations:"))
async def process_back_to_durations(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ callback_data
    country_code = callback.data.split(':')[2]
    
    # –í–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è callback.data, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å –Ω—É–∂–Ω—ã–º country_code
    # –∏ –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    language_code = user.language_code if user else callback.from_user.language_code or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
    country = await get_country_by_code(session, country_code)
    
    if not country:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
        await process_buy_esim_callback(callback, state, session)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(selected_country_code=country_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    packages = await get_packages_by_country(session, country.id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–∫–µ—Ç–∞
    await state.set_state(BuyESim.select_duration)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ –ø–∞–∫–µ—Ç–æ–≤
    keyboard = get_durations_keyboard(packages, country_code, language_code=language_code)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–µ –∏ –≤—ã–±–æ—Ä–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    flag = country.flag_emoji or 'üåç'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    country_name = country.name_ru if language_code == 'ru' and hasattr(country, 'name_ru') and country.name_ru else country.name
    
    if language_code == 'ru':
        header = f"{flag} **{country_name}** - –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:"
        message = (
            f"{header}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–∞–∫–µ—Ç–∞ –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏ –≤ {country_name}. "
            f"–í—Å–µ –ø–∞–∫–µ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 4G/LTE –∏ 5G (–≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ)."
        )
    else:
        header = f"{flag} **{country_name}** - Select package duration:"
        message = (
            f"{header}\n\n"
            f"Choose the duration of your internet package for your trip to {country_name}. "
            f"All packages include high-speed internet with 4G/LTE and 5G support (where available)."
        )
    
    await callback.message.edit_text(
        message,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer()


@router.callback_query(F.data == "page_info")
async def process_page_info(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"""
    await callback.answer()


@router.callback_query(F.data.startswith("duration_header:"))
async def process_duration_header(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ callback_data
    duration = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language_code = callback.from_user.language_code or 'ru'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if language_code == 'ru':
        await callback.answer(f"–ü–∞–∫–µ—Ç—ã –Ω–∞ {duration} –¥–Ω–µ–π")
    else:
        await callback.answer(f"Packages for {duration} days")