import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update

from database.models import Country, Package, User
from services.esim_service import ESIMService

router = Router()
logger = logging.getLogger(__name__)

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def admin_filter(message: Message, session: AsyncSession) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user = await session.execute(
        select(User).where(User.telegram_id == message.from_user.id)
    )
    user = user.scalar_one_or_none()
    return user and user.is_admin


@router.message(Command("update_packages"), admin_filter)
async def update_packages(message: Message, esim_service: ESIMService, session: AsyncSession):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ eSIM –∏–∑ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    country_code = None
    if len(args) > 1:
        country_code = args[1].upper()
        await message.answer(f"üìç –ë—É–¥—É –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–∞–∫–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã: {country_code}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        countries_query = select(Country)
        if country_code:
            countries_query = countries_query.where(Country.code == country_code)

        countries = await session.execute(countries_query)
        countries = countries.scalars().all()

        if not countries:
            return await message.answer("‚ùå –°—Ç—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        total_countries = len(countries)
        updated_packages = 0
        new_packages = 0

        await message.answer(f"üåç –ù–∞–π–¥–µ–Ω–æ {total_countries} —Å—Ç—Ä–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤...")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
        for country in countries:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã –∏–∑ API
            packages = await esim_service.get_available_package_codes(country.code)

            if not packages:
                logger.warning(f"No packages found for country {country.code}")
                await message.answer(f"‚ö†Ô∏è –î–ª—è —Å—Ç—Ä–∞–Ω—ã {country.code} ({country.name}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ API.")
                continue

            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
            existing_packages = await session.execute(
                select(Package).where(Package.country_id == country.id)
            )
            existing_packages = existing_packages.scalars().all()

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –∫–æ–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            existing_packages_dict = {p.package_code: p for p in existing_packages}

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç –∏–∑ API
            for api_package in packages:
                package_code = api_package["code"]
                package_name = api_package["name"]
                data_volume = api_package.get("data_volume", "")
                validity = api_package.get("validity", "")

                # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                data_amount = 0
                duration = 0

                # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –∏ data_volume
                try:
                    # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ data_volume
                    if "GB" in package_name:
                        data_str = package_name.split("GB")[0].strip().split()[-1]
                        data_amount = float(data_str)
                    elif data_volume and "GB" in data_volume:
                        data_str = data_volume.split("GB")[0].strip()
                        data_amount = float(data_str)

                    # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ validity
                    if "Day" in package_name or "Days" in package_name:
                        days_str = package_name.split("Day")[0].strip().split()[-1]
                        duration = int(days_str)
                    elif validity and ("Day" in validity or "Days" in validity):
                        days_str = validity.split("Day")[0].strip()
                        duration = int(days_str)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ {package_name}: {e}")

                # –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if package_code in existing_packages_dict:
                    existing_package = existing_packages_dict[package_code]

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                    if (existing_package.name != package_name or
                        (data_amount > 0 and existing_package.data_amount != data_amount) or
                        (duration > 0 and existing_package.duration != duration)):

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
                        await session.execute(
                            update(Package)
                            .where(Package.id == existing_package.id)
                            .values(
                                name=package_name,
                                data_amount=data_amount if data_amount > 0 else existing_package.data_amount,
                                duration=duration if duration > 0 else existing_package.duration,
                                is_available=True
                            )
                        )
                        updated_packages += 1

                # –ï—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç
                    new_package = Package(
                        country_id=country.id,
                        package_code=package_code,
                        name=package_name,
                        data_amount=data_amount if data_amount > 0 else 0,
                        duration=duration if duration > 0 else 0,
                        price=0,  # –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
                        is_available=True
                    )
                    session.add(new_package)
                    new_packages += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
            await session.commit()
            await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country.code} ({country.name})")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await message.answer(
            f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω: {total_countries}\n"
            f"- –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {updated_packages}\n"
            f"- –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {new_packages}\n\n"
            f"‚ÑπÔ∏è –¶–µ–Ω—ã –Ω–∞ –ø–∞–∫–µ—Ç—ã –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é. –ù–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å —Ü–µ–Ω–æ–π 0."
        )

        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –°–ª–æ–≤–µ–Ω–∏–∏
        if not country_code:
            await message.answer(
                "üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –°–ª–æ–≤–µ–Ω–∏–∏ (SI) –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/packages SI"
            )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–æ–≤: {str(e)}")
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await session.rollback()


@router.message(Command("packages"), admin_filter)
async def list_packages(message: Message, esim_service: ESIMService, session: AsyncSession):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ eSIM"""

    location_code = ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    if len(message.text.split()) > 1:
        location_code = message.text.split()[1].upper()

    await message.answer(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {location_code or '–≤—Å–µ'}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
        packages = await esim_service.get_available_package_codes(location_code)

        if not packages:
            return await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–∫–µ—Ç–∞—Ö (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –ø–∞–∫–µ—Ç–æ–≤)
        max_packages = min(20, len(packages))

        result_msg = f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(packages)} –ø–∞–∫–µ—Ç–æ–≤. –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_packages}:\n\n"

        for i, package in enumerate(packages[:max_packages]):
            result_msg += (
                f"{i+1}. *–ö–æ–¥:* `{package['code']}`\n"
                f"   *–ù–∞–∑–≤–∞–Ω–∏–µ:* {package['name']}\n"
                f"   *–û–±—ä–µ–º:* {package['data_volume']}\n"
                f"   *–°—Ä–æ–∫:* {package['validity']}\n\n"
            )

        # –ï—Å–ª–∏ –ø–∞–∫–µ—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        if len(packages) > max_packages:
            result_msg += f"\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {max_packages} –∏–∑ {len(packages)} –ø–∞–∫–µ—Ç–æ–≤."

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        result_msg += "\n\n–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/update_packages [–∫–æ–¥_—Å—Ç—Ä–∞–Ω—ã]"

        await message.answer(result_msg, parse_mode="Markdown")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {str(e)}")


@router.message(Command("sync_packages"), admin_filter)
async def sync_packages(message: Message, esim_service: ESIMService, session: AsyncSession):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã eSIM —Å API"""
    country_code = message.text.split()[1].upper() if len(message.text.split()) > 1 else ""

    if country_code:
        await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code}...")
    else:
        await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–∞–∫–µ—Ç–æ–≤
    async with message.bot.get('db_session')() as session:
        result = await esim_service.sync_packages_with_api(session, country_code if country_code else None)

        if result["success"]:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–µ
            country_stats = []

            for country_result in result["processed_countries"]:
                country_stats.append(
                    f"üåç {country_result['country_name']} ({country_result['country_code']}):\n"
                    f"  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {country_result['packages_added']}\n"
                    f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {country_result['packages_updated']}\n"
                    f"  ‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {country_result['packages_deactivated']}"
                )

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_message = (
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω: {result['countries_processed']}\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {result['packages_added']}\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {result['packages_updated']}\n"
                f"‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {result['packages_deactivated']}"
            )

            await message.answer(stats_message)

            # –ï—Å–ª–∏ –±—ã–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É
            if country_code and len(country_stats) == 1:
                await message.answer(country_stats[0])
            # –ï—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            elif len(country_stats) > 1:
                await message.answer("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ –±–æ–ª–µ–µ 10 —Å—Ç—Ä–∞–Ω, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —á–∞—Ç
                for i in range(0, min(10, len(country_stats))):
                    await message.answer(country_stats[i])

                if len(country_stats) > 10:
                    await message.answer(f"... –∏ –µ—â–µ {len(country_stats) - 10} —Å—Ç—Ä–∞–Ω")
        else:
            error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤:\n"
            error_message += "\n".join([f"‚Ä¢ {err}" for err in result["errors"][:5]])

            if len(result["errors"]) > 5:
                error_message += f"\n... –∏ –µ—â–µ {len(result['errors']) - 5} –æ—à–∏–±–æ–∫"

            await message.answer(error_message)