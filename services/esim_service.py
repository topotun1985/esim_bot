import os
import logging
import aiohttp
import pycountry
from typing import Dict, List, Optional, Any, Union
from sqlalchemy.ext.asyncio import AsyncSession
from dotenv import load_dotenv

from database.models import Country, Package
from database.queries import get_all_countries, get_country_by_code, get_packages_by_country

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

class ESIMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ eSIM"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.api_key = os.getenv("ESIM_API_KEY", "")
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –±–µ–∑ /api/v1
        self.api_base_url = os.getenv("ESIM_API_URL", "https://api.esimaccess.com")
        
        if not self.api_key:
            logger.warning("ESIM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")
            
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –±–∞–∑–æ–≤—ã–π URL API: {self.api_base_url}")
    
    async def _make_request(self, method: str, endpoint: str, params: Optional[Dict] = None, json_data: Optional[Dict] = None) -> Dict:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /api/v1 –∫ URL
        api_path = "/api/v1/"
        
        # –û—á–∏—â–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–µ—à–µ–π
        if endpoint.startswith("/"):
            endpoint = endpoint[1:]
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
        url = f"{self.api_base_url}{api_path}{endpoint}"
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"‚òÖ‚òÖ‚òÖ –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API ‚òÖ‚òÖ‚òÖ")
        logger.info(f"–ú–µ—Ç–æ–¥: {method.upper()}")
        logger.info(f"–ë–∞–∑–æ–≤—ã–π URL: {self.api_base_url}")
        logger.info(f"–ü—É—Ç—å API: {api_path}")
        logger.info(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}")
        logger.info(f"–ü–æ–ª–Ω—ã–π URL: {url}")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        logger.info(f"JSON –¥–∞–Ω–Ω—ã–µ: {json_data}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å RT-AccessCode
        headers = {
            "RT-AccessCode": self.api_key,
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        logger.info(f"API –∑–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        
        try:
            async with aiohttp.ClientSession() as session:
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {method} –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}")
                
                if method.lower() == "get":
                    async with session.get(url, headers=headers, params=params) as response:
                        return await self._process_response(response)
                elif method.lower() == "post":
                    async with session.post(url, headers=headers, json=json_data) as response:
                        return await self._process_response(response)
                elif method.lower() == "put":
                    async with session.put(url, headers=headers, json=json_data) as response:
                        return await self._process_response(response)
                elif method.lower() == "delete":
                    async with session.delete(url, headers=headers) as response:
                        return await self._process_response(response)
                else:
                    raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ HTTP: {method}")
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
            raise
    
    async def _process_response(self, response: aiohttp.ClientResponse) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        if response.status == 204:  # No content
            return {}
        
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: {response.status}")
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.headers}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            text = await response.text()
            logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {text[:500]}" + ('...' if len(text) > 500 else ''))
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                data = await response.json(content_type=None)  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º content-type
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                import json
                try:
                    data = json.loads(text)
                except:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {text[:200]}")
                    return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç", "text": text[:200]}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            if response.status >= 400:
                error_message = data.get("message", data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                error_code = data.get("code", "unknown")
                logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status} - {error_message} (–∫–æ–¥: {error_code})")
                return {"error": error_message, "code": error_code}
                
            return data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API: {e}")
            return {"error": str(e)}
    

    
    async def check_balance(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ API - —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
            response = await self._make_request("post", "open/balance/query")
            
            if response.get("success"):
                logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API! –ë–∞–ª–∞–Ω—Å: {response.get('obj', {}).get('balance', '0')}")
                return response
            else:
                logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {response.get('errorMsg')}")
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ API: {e}")
            return {}

    def _get_hardcoded_countries(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        logger.info("–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω")
        return [
            {"code": "US", "name": "United States", "flag_emoji": "üá∫üá∏", "is_available": True},
            {"code": "GB", "name": "United Kingdom", "flag_emoji": "üá¨üáß", "is_available": True},
            {"code": "DE", "name": "Germany", "flag_emoji": "üá©üá™", "is_available": True},
            {"code": "FR", "name": "France", "flag_emoji": "üá´üá∑", "is_available": True},
            {"code": "IT", "name": "Italy", "flag_emoji": "üáÆüáπ", "is_available": True},
            {"code": "ES", "name": "Spain", "flag_emoji": "üá™üá∏", "is_available": True},
            {"code": "TR", "name": "Turkey", "flag_emoji": "üáπüá∑", "is_available": True},
            {"code": "AE", "name": "United Arab Emirates", "flag_emoji": "üá¶üá™", "is_available": True},
            {"code": "TH", "name": "Thailand", "flag_emoji": "üáπüá≠", "is_available": True},
            {"code": "JP", "name": "Japan", "flag_emoji": "üáØüáµ", "is_available": True},
            {"code": "CN", "name": "China", "flag_emoji": "üá®üá≥", "is_available": True},
            {"code": "SG", "name": "Singapore", "flag_emoji": "üá∏üá¨", "is_available": True},
            {"code": "AU", "name": "Australia", "flag_emoji": "üá¶üá∫", "is_available": True},
            {"code": "CA", "name": "Canada", "flag_emoji": "üá®üá¶", "is_available": True},
            {"code": "MX", "name": "Mexico", "flag_emoji": "üá≤üáΩ", "is_available": True},
            {"code": "BR", "name": "Brazil", "flag_emoji": "üáßüá∑", "is_available": True},
            {"code": "EG", "name": "Egypt", "flag_emoji": "üá™üá¨", "is_available": True},
            {"code": "ZA", "name": "South Africa", "flag_emoji": "üáøüá¶", "is_available": True},
            {"code": "RU", "name": "Russia", "flag_emoji": "üá∑üá∫", "is_available": True},
            {"code": "IN", "name": "India", "flag_emoji": "üáÆüá≥", "is_available": True},
        ]
    
    async def get_countries(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ API"""
        logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ GET –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            response = await self._make_request("GET", "/open/package/list")
            
            # –ï—Å–ª–∏ GET –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º POST –∑–∞–ø—Ä–æ—Å
            if response.get("error") or ("result" not in response and "obj" not in response):
                logger.warning("GET –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º POST –∑–∞–ø—Ä–æ—Å")
                data = {
                    "locationCode": "",  # –ø—É—Å—Ç–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
                    "type": "BASE"       # —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã, –Ω–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                }
                response = await self._make_request("POST", "/open/package/list", json_data=data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            if response.get("error"):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {response.get('error')}")
                return self._get_hardcoded_countries()
                
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            packages_list = []
            if "result" in response:
                packages_list = response.get("result", [])
            elif "obj" in response and "packageList" in response["obj"]:
                packages_list = response["obj"]["packageList"]
                
            if not packages_list:
                logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç API")
                return self._get_hardcoded_countries()
                
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(packages_list)} –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç API")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞–Ω –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            countries_dict = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            countries_dict["!GL"] = {
                "code": "!GL", 
                "name": "Global Packages", 
                "flag_emoji": "üåé", 
                "is_available": True
            }
            
            countries_dict["!RG"] = {
                "code": "!RG", 
                "name": "Regional Packages", 
                "flag_emoji": "üåç", 
                "is_available": True
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
            for package in packages_list:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø–∞–∫–µ—Ç–∞
                country_code = package.get("country", "")
                if not country_code:
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
                    country_code = package.get("location", "")
                
                # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–∞ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                if country_code:
                    country_codes = [loc.strip() for loc in country_code.split(",")]
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
                    for code in country_codes:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–¥—ã
                        if not code:
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
                        if code not in countries_dict:
                            try:
                                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ pycountry
                                country = pycountry.countries.get(alpha_2=code)
                                if country:
                                    countries_dict[code] = {
                                        "code": code,
                                        "name": country.name,
                                        "flag_emoji": self._create_flag_emoji(code),
                                        "is_available": True
                                    }
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ {code}: {e}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫
            countries = list(countries_dict.values())
            
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥
            if not countries:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø–∞–∫–µ—Ç–æ–≤")
                return self._get_hardcoded_countries()
                
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
            countries.sort(key=lambda x: x["name"])  
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            if "!GL" in countries_dict:
                countries = [countries_dict["!GL"]] + [c for c in countries if c["code"] != "!GL"]
            if "!RG" in countries_dict:
                countries = [countries_dict["!RG"]] + [c for c in countries if c["code"] != "!RG" and c["code"] != "!GL"]
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(countries)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ API")
            return countries
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω: {e}")
            return self._get_hardcoded_countries()
            

    
    async def get_packages(self, country_code: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API open/package/list")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è API
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä country
            response = await self._make_request(
                "GET", 
                "/open/package/list", 
                params={"country": country_code}
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            if response.get("error") or "result" not in response:
                logger.warning(f"–ü–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è {country_code}")
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä locationCode
                response = await self._make_request(
                    "POST", 
                    "/open/package/list", 
                    json_data={"locationCode": country_code, "type": "BASE"}
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if response.get("error"):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è {country_code}: {response.get('error')}")
                return []
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            packages_list = []
            if "result" in response:
                packages_list = response.get("result", [])
            elif "obj" in response and "packageList" in response["obj"]:
                packages_list = response["obj"]["packageList"]
                
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(packages_list)} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è {country_code} –æ—Ç API")
            
            result = []
            for item in packages_list:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
                data_amount_bytes = item.get("volume", 0)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                price_value = item.get("amount", 0)
                price_currency = item.get("currency", "USD")
                logger.info(f"–¶–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞ –≤ API: {price_value} {price_currency}, —Ç–∏–ø: {type(price_value).__name__}")
                
                duration_days = item.get("duration", 0)
                package_name = f"{self._convert_to_gb(data_amount_bytes)}GB / {duration_days} –¥–Ω–µ–π"
                description = item.get("description", "")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞: {item}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –ø–∞–∫–µ—Ç–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π
                package_code = item.get("packageCode", "")  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º packageCode
                if not package_code:
                    package_code = item.get("packageId", "")  # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º packageId
                if not package_code:
                    package_code = item.get("code", "")  # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º code
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–∞, —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞–Ω—ã, —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if not package_code:
                    data_gb = self._convert_to_gb(data_amount_bytes)
                    package_code = f"{country_code}-{data_gb:.1f}GB-{duration_days}D"
                    logger.info(f"–°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–∞–∫–µ—Ç–∞: {package_code}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –ø–∞–∫–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–æ–¥–µ–ª–∏ –ë–î
                result.append({
                    "package_code": package_code,
                    "slug": f"{country_code.lower()}-{package_code.lower()}",
                    "name": package_name,
                    "data_amount": self._convert_to_gb(data_amount_bytes),
                    "duration": duration_days,
                    "price": self._convert_price(price_value),
                    "description": description,
                    "is_available": True
                })
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(result)} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è {country_code}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è {country_code}: {e}")
            return []
    
    async def sync_countries_and_packages(self, session: AsyncSession) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω –∏ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω –∏ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ API –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å—Ç—Ä–∞–Ω –æ—Ç API
            countries_data = await self.get_countries()
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(countries_data)} —Å—Ç—Ä–∞–Ω –æ—Ç API")
            
            if not countries_data:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã –æ—Ç API –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
                return False
            
            countries_updated = 0
            countries_created = 0
            packages_updated = 0
            packages_created = 0
            packages_failed = 0
            countries_with_packages = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            for country_data in countries_data:
                code = country_data.get("code")
                if not code:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∞ –±–µ–∑ –∫–æ–¥–∞: {country_data}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∞
                existing_country = await get_country_by_code(session, code)
                
                if existing_country:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω—É
                    existing_country.name = country_data.get("name", existing_country.name)
                    existing_country.flag_emoji = country_data.get("flag_emoji", existing_country.flag_emoji)
                    existing_country.is_available = country_data.get("is_available", True)
                    countries_updated += 1
                    logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {code} - {existing_country.name}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É
                    new_country = Country(
                        code=code,
                        name=country_data.get("name", ""),
                        flag_emoji=country_data.get("flag_emoji", ""),
                        is_available=country_data.get("is_available", True)
                    )
                    session.add(new_country)
                    countries_created += 1
                    logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞: {code} - {new_country.name}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —Å—Ç—Ä–∞–Ω—ã
                await session.flush()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {code}")
                
                # –î–µ–ª–∞–µ–º –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
                max_package_attempts = 3
                package_attempt = 1
                packages_data = None
                
                while package_attempt <= max_package_attempts and not packages_data:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {package_attempt} –∏–∑ {max_package_attempts} –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è {code}")
                    packages_data = await self.get_packages(code)
                    
                    if not packages_data:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {package_attempt}: –ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {code} –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å")
                        package_attempt += 1
                        if package_attempt <= max_package_attempts:
                            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            await asyncio.sleep(1)
                
                if not packages_data:
                    logger.warning(f"‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {code} –Ω–µ —É–¥–∞–ª–∏—Å—å")
                    continue
                
                logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(packages_data)} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {code}")
                country_id = existing_country.id if existing_country else new_country.id
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω —Å –ø–∞–∫–µ—Ç–∞–º–∏
                countries_with_packages += 1
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã –æ–¥–∏–Ω —Ä–∞–∑
                existing_packages = await get_packages_by_country(session, country_id)
                logger.info(f"üíæ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å {len(existing_packages)} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {code}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–¥–æ–≤ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                existing_package_codes = {p.package_code for p in existing_packages}
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–¥—ã –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                from database.queries import get_package_by_code
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                for package_data in packages_data:
                    package_code = package_data.get("package_code")
                    if not package_code:
                        logger.warning(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç –±–µ–∑ –∫–æ–¥–∞: {package_data}")
                        packages_failed += 1
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ
                    if package_code not in existing_package_codes:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –ø–æ –≤—Å–µ–π –±–∞–∑–µ
                        existing_global_package = await get_package_by_code(session, package_code)
                        if existing_global_package and existing_global_package.country_id != country_id:
                            # –ï—Å–ª–∏ –ø–∞–∫–µ—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ, —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
                            data_gb = package_data.get("data_amount", 0)
                            duration_days = package_data.get("duration", 0)
                            original_code = package_code
                            package_code = f"{code}-{data_gb:.1f}GB-{duration_days}D-{original_code}"
                            logger.warning(f"‚ö†Ô∏è –ö–æ–¥ –ø–∞–∫–µ—Ç–∞ {original_code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥: {package_code}")
                            package_data["package_code"] = package_code
                    
                    # –ò—â–µ–º –ø–∞–∫–µ—Ç –ø–æ –∫–æ–¥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    existing_package = next((p for p in existing_packages if p.package_code == package_code), None)
                    
                    if existing_package:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç
                        existing_package.name = package_data.get("name", existing_package.name)
                        existing_package.data_amount = package_data.get("data_amount", existing_package.data_amount)
                        existing_package.duration = package_data.get("duration", existing_package.duration)
                        existing_package.price = package_data.get("price", existing_package.price)
                        existing_package.description = package_data.get("description", existing_package.description)
                        existing_package.is_available = package_data.get("is_available", True)
                        packages_updated += 1
                        logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç: {package_code} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {code}")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç
                        new_package = Package(
                            country_id=country_id,
                            package_code=package_code,
                            slug=package_data.get("slug", f"{code.lower()}-{package_code.lower()}"),
                            name=package_data.get("name", ""),
                            data_amount=package_data.get("data_amount", 0.0),
                            duration=package_data.get("duration", 0),
                            price=package_data.get("price", 0.0),
                            description=package_data.get("description", ""),
                            is_available=package_data.get("is_available", True)
                        )
                        session.add(new_package)
                        packages_created += 1
                        logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç: {package_code} –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {code}")
                
                # –î–µ–ª–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∫–æ–º–º–∏—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
                await session.flush()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await session.commit()
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω –∏ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            logger.info(f"   - –°—Ç—Ä–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {countries_updated}")
            logger.info(f"   - –°—Ç—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–æ: {countries_created}")
            logger.info(f"   - –°—Ç—Ä–∞–Ω —Å –ø–∞–∫–µ—Ç–∞–º–∏: {countries_with_packages} –∏–∑ {len(countries_data)}")
            logger.info(f"   - –ü–∞–∫–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {packages_updated}")
            logger.info(f"   - –ü–∞–∫–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {packages_created}")
            logger.info(f"   - –ü–∞–∫–µ—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {packages_failed}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω –∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
            await session.rollback()
            return False


    def _create_flag_emoji(self, country_code: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –∏–∑ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã ISO 3166-1 alpha-2"""
        if not country_code or len(country_code) != 2:
            return ""
        # –°–¥–≤–∏–≥ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å U+1F1E6 (üá¶) –¥–ª—è –±—É–∫–≤—ã A
        # –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è U+1F1FF (üáø) –¥–ª—è –±—É–∫–≤—ã Z
        return "".join(chr(ord('\U0001F1E6') + ord(c) - ord('A')) for c in country_code.upper())
    
    def _convert_to_gb(self, bytes_value: int) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–π—Ç–æ–≤ –≤ –≥–∏–≥–∞–±–∞–π—Ç—ã"""
        if not bytes_value:
            return 0.0
        return round(bytes_value / (1024 * 1024 * 1024), 2)
    
    def _convert_price(self, price_value: Any) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ API –≤ –¥–æ–ª–ª–∞—Ä—ã
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ü–µ–Ω—ã –≤ API:
        - –¶–µ–ª–æ–µ —á–∏—Å–ª–æ (10000 = $1.00)
        - –°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º ("10.99")
        - –ß–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π (10.99)
        """
        if not price_value:
            return 0.0
            
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω—ã: {price_value}, —Ç–∏–ø: {type(price_value).__name__}")
        
        try:
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø—Ä–∏—à–ª–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            if isinstance(price_value, str):
                # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª—ã
                price_value = price_value.replace('$', '').replace(' ', '').strip()
                return float(price_value)
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10000 = $1.00
            if isinstance(price_value, int) and price_value > 100:
                return round(price_value / 10000, 2)
                
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–∂–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.99)
            return float(price_value)
        except (ValueError, TypeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω—ã {price_value}: {e}")
            return 0.0


# –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
esim_service = ESIMService()
